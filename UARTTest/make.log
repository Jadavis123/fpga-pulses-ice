yosys -p "synth_ecp5 -json UARTTest.json -top UARTTest" UARTTest.v uart.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3578 (git sha1 ed579038, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Parsing `UARTTest.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: UARTTest.v
Parsing Verilog input from `UARTTest.v' to AST representation.
Generating RTLIL representation for module `\UARTTest'.
Successfully finished Verilog frontend.

-- Parsing `uart.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: uart.v
Parsing Verilog input from `uart.v' to AST representation.
Generating RTLIL representation for module `\uart'.
Successfully finished Verilog frontend.

-- Running command `synth_ecp5 -json UARTTest.json -top UARTTest' --

3. Executing SYNTH_ECP5 pass.

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\$__ABC9_LUT5'.
Generating RTLIL representation for module `\$__ABC9_LUT6'.
Generating RTLIL representation for module `\$__ABC9_LUT7'.
Generating RTLIL representation for module `\L6MUX21'.
Generating RTLIL representation for module `\CCU2C'.
Generating RTLIL representation for module `\TRELLIS_RAM16X2'.
Generating RTLIL representation for module `\PFUMX'.
Generating RTLIL representation for module `\TRELLIS_DPR16X4'.
Generating RTLIL representation for module `\DPR16X4C'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\TRELLIS_FF'.
Generating RTLIL representation for module `\TRELLIS_IO'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\TRELLIS_SLICE'.
Generating RTLIL representation for module `\DP16KD'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_bb.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\MULT18X18D'.
Generating RTLIL representation for module `\ALU54B'.
Generating RTLIL representation for module `\EHXPLLL'.
Generating RTLIL representation for module `\DTR'.
Generating RTLIL representation for module `\OSCG'.
Generating RTLIL representation for module `\USRMCLK'.
Generating RTLIL representation for module `\JTAGG'.
Generating RTLIL representation for module `\DELAYF'.
Generating RTLIL representation for module `\DELAYG'.
Generating RTLIL representation for module `\IDDRX1F'.
Generating RTLIL representation for module `\IDDRX2F'.
Generating RTLIL representation for module `\IDDR71B'.
Generating RTLIL representation for module `\IDDRX2DQA'.
Generating RTLIL representation for module `\ODDRX1F'.
Generating RTLIL representation for module `\ODDRX2F'.
Generating RTLIL representation for module `\ODDR71B'.
Generating RTLIL representation for module `\OSHX2A'.
Generating RTLIL representation for module `\ODDRX2DQA'.
Generating RTLIL representation for module `\ODDRX2DQSB'.
Generating RTLIL representation for module `\TSHX2DQA'.
Generating RTLIL representation for module `\TSHX2DQSA'.
Generating RTLIL representation for module `\DQSBUFM'.
Generating RTLIL representation for module `\DDRDLLA'.
Generating RTLIL representation for module `\CLKDIVF'.
Generating RTLIL representation for module `\ECLKSYNCB'.
Generating RTLIL representation for module `\ECLKBRIDGECS'.
Generating RTLIL representation for module `\DCCA'.
Generating RTLIL representation for module `\DCUA'.
Generating RTLIL representation for module `\EXTREFB'.
Generating RTLIL representation for module `\PCSCLKDIV'.
Generating RTLIL representation for module `\PUR'.
Generating RTLIL representation for module `\GSR'.
Generating RTLIL representation for module `\SGSR'.
Generating RTLIL representation for module `\PDPW16KD'.
Successfully finished Verilog frontend.

3.3. Executing HIERARCHY pass (managing design hierarchy).

3.3.1. Analyzing design hierarchy..
Top module:  \UARTTest
Used module:     \uart

3.3.2. Analyzing design hierarchy..
Top module:  \UARTTest
Used module:     \uart
Removed 0 unused modules.

3.4. Executing PROC pass (convert processes to netlists).

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$186'.
Cleaned up 1 empty switch.

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$266 in module TRELLIS_FF.
Removed 2 dead cases from process $proc$uart.v:135$11 in module uart.
Marked 17 switch rules as full_case in process $proc$uart.v:135$11 in module uart.
Marked 1 switch rules as full_case in process $proc$UARTTest.v:68$1 in module UARTTest.
Removed a total of 2 dead cases.

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 23 assignments to connections.

3.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$270'.
  Set init value: \Q = 1'0
Found init rule in `\uart.$proc$uart.v:106$40'.
  Set init value: \tx_state = 2'00
Found init rule in `\uart.$proc$uart.v:105$39'.
  Set init value: \tx_out = 1'1
Found init rule in `\uart.$proc$uart.v:101$38'.
  Set init value: \recv_state = 3'000
Found init rule in `\UARTTest.$proc$UARTTest.v:21$4'.
  Set init value: \txstate = 1'0
Found init rule in `\UARTTest.$proc$UARTTest.v:13$2'.
  Set init value: \transmit = 1'1

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$270'.
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$266'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$263'.
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$242'.
     1/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$241_EN[3:0]$245
     2/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$241_DATA[3:0]$244
     3/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$241_ADDR[3:0]$243
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$209'.
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$187'.
     1/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$185_EN[3:0]$190
     2/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$185_DATA[3:0]$189
     3/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$185_ADDR[3:0]$188
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$186'.
Creating decoders for process `\uart.$proc$uart.v:106$40'.
Creating decoders for process `\uart.$proc$uart.v:105$39'.
Creating decoders for process `\uart.$proc$uart.v:101$38'.
Creating decoders for process `\uart.$proc$uart.v:135$11'.
     1/57: $5\tx_state[1:0]
     2/57: $5\tx_clk[10:0]
     3/57: $4\tx_data[7:0]
     4/57: $4\tx_out[0:0]
     5/57: $4\tx_bits_remaining[3:0]
     6/57: $3\tx_data[7:0]
     7/57: $3\tx_bits_remaining[3:0]
     8/57: $4\tx_state[1:0]
     9/57: $3\tx_out[0:0]
    10/57: $4\tx_clk[10:0]
    11/57: $3\tx_state[1:0]
    12/57: $2\tx_bits_remaining[3:0]
    13/57: $2\tx_out[0:0]
    14/57: $3\tx_clk[10:0]
    15/57: $2\tx_data[7:0]
    16/57: $1\tx_data[7:0]
    17/57: $1\tx_bits_remaining[3:0]
    18/57: $2\tx_state[1:0]
    19/57: $1\tx_out[0:0]
    20/57: $2\tx_clk[10:0]
    21/57: $9\recv_state[2:0]
    22/57: $8\recv_state[2:0]
    23/57: $8\rx_clk[14:0]
    24/57: $3\rx_data[7:0]
    25/57: $7\recv_state[2:0]
    26/57: $7\rx_clk[14:0]
    27/57: $4\rx_bits_remaining[3:0]
    28/57: $5\rx_sample_countdown[3:0]
    29/57: $6\rx_samples[3:0]
    30/57: $2\rx_data[7:0]
    31/57: $5\rx_samples[3:0]
    32/57: $6\recv_state[2:0]
    33/57: $4\rx_sample_countdown[3:0]
    34/57: $6\rx_clk[14:0]
    35/57: $4\rx_samples[3:0]
    36/57: $3\rx_sample_countdown[3:0]
    37/57: $3\rx_samples[3:0]
    38/57: $5\recv_state[2:0]
    39/57: $3\rx_bits_remaining[3:0]
    40/57: $5\rx_clk[14:0]
    41/57: $2\rx_bits_remaining[3:0]
    42/57: $4\recv_state[2:0]
    43/57: $4\rx_clk[14:0]
    44/57: $2\rx_sample_countdown[3:0]
    45/57: $2\rx_samples[3:0]
    46/57: $3\recv_state[2:0]
    47/57: $3\rx_clk[14:0]
    48/57: $2\recv_state[2:0]
    49/57: $2\rx_clk[14:0]
    50/57: $1\rx_data[7:0]
    51/57: $1\rx_bits_remaining[3:0]
    52/57: $1\rx_sample_countdown[3:0]
    53/57: $1\rx_samples[3:0]
    54/57: $1\tx_clk[10:0]
    55/57: $1\rx_clk[14:0]
    56/57: $1\tx_state[1:0]
    57/57: $1\recv_state[2:0]
Creating decoders for process `\UARTTest.$proc$UARTTest.v:21$4'.
Creating decoders for process `\UARTTest.$proc$UARTTest.v:20$3'.
Creating decoders for process `\UARTTest.$proc$UARTTest.v:13$2'.
Creating decoders for process `\UARTTest.$proc$UARTTest.v:68$1'.
     1/2: $0\txstate[0:0]
     2/2: $0\transmit[0:0]

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\UARTTest.\transmitbyte' from process `\UARTTest.$proc$UARTTest.v:20$3'.

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\TRELLIS_FF.\Q' using process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$266'.
  created $dff cell `$procdff$810' with positive edge clock.
Creating register for signal `\DPR16X4C.\i' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$263'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$241_ADDR' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$242'.
  created $dff cell `$procdff$811' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$241_DATA' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$242'.
  created $dff cell `$procdff$812' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$241_EN' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$242'.
  created $dff cell `$procdff$813' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\i' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$209'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$185_ADDR' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$187'.
  created $dff cell `$procdff$814' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$185_DATA' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$187'.
  created $dff cell `$procdff$815' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$185_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$187'.
  created $dff cell `$procdff$816' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\muxwre' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$186'.
  created direct connection (no actual register cell created).
Creating register for signal `\uart.\rx_samples' using process `\uart.$proc$uart.v:135$11'.
  created $dff cell `$procdff$817' with positive edge clock.
Creating register for signal `\uart.\rx_sample_countdown' using process `\uart.$proc$uart.v:135$11'.
  created $dff cell `$procdff$818' with positive edge clock.
Creating register for signal `\uart.\rx_clk' using process `\uart.$proc$uart.v:135$11'.
  created $dff cell `$procdff$819' with positive edge clock.
Creating register for signal `\uart.\tx_clk' using process `\uart.$proc$uart.v:135$11'.
  created $dff cell `$procdff$820' with positive edge clock.
Creating register for signal `\uart.\recv_state' using process `\uart.$proc$uart.v:135$11'.
  created $dff cell `$procdff$821' with positive edge clock.
Creating register for signal `\uart.\rx_bits_remaining' using process `\uart.$proc$uart.v:135$11'.
  created $dff cell `$procdff$822' with positive edge clock.
Creating register for signal `\uart.\rx_data' using process `\uart.$proc$uart.v:135$11'.
  created $dff cell `$procdff$823' with positive edge clock.
Creating register for signal `\uart.\tx_out' using process `\uart.$proc$uart.v:135$11'.
  created $dff cell `$procdff$824' with positive edge clock.
Creating register for signal `\uart.\tx_state' using process `\uart.$proc$uart.v:135$11'.
  created $dff cell `$procdff$825' with positive edge clock.
Creating register for signal `\uart.\tx_bits_remaining' using process `\uart.$proc$uart.v:135$11'.
  created $dff cell `$procdff$826' with positive edge clock.
Creating register for signal `\uart.\tx_data' using process `\uart.$proc$uart.v:135$11'.
  created $dff cell `$procdff$827' with positive edge clock.
Creating register for signal `\UARTTest.\transmit' using process `\UARTTest.$proc$UARTTest.v:68$1'.
  created $dff cell `$procdff$828' with positive edge clock.
Creating register for signal `\UARTTest.\tx_byte' using process `\UARTTest.$proc$UARTTest.v:68$1'.
  created $dff cell `$procdff$829' with positive edge clock.
Creating register for signal `\UARTTest.\txstate' using process `\UARTTest.$proc$UARTTest.v:68$1'.
  created $dff cell `$procdff$830' with positive edge clock.

3.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$270'.
Found and cleaned up 2 empty switches in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$266'.
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$266'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$263'.
Found and cleaned up 1 empty switch in `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$242'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$242'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$209'.
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$187'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$187'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$186'.
Removing empty process `uart.$proc$uart.v:106$40'.
Removing empty process `uart.$proc$uart.v:105$39'.
Removing empty process `uart.$proc$uart.v:101$38'.
Found and cleaned up 17 empty switches in `\uart.$proc$uart.v:135$11'.
Removing empty process `uart.$proc$uart.v:135$11'.
Removing empty process `UARTTest.$proc$UARTTest.v:21$4'.
Removing empty process `UARTTest.$proc$UARTTest.v:20$3'.
Removing empty process `UARTTest.$proc$UARTTest.v:13$2'.
Found and cleaned up 1 empty switch in `\UARTTest.$proc$UARTTest.v:68$1'.
Removing empty process `UARTTest.$proc$UARTTest.v:68$1'.
Cleaned up 22 empty switches.

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module uart.
<suppressed ~1 debug messages>

3.6. Executing TRIBUF pass.

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.
<suppressed ~29 debug messages>

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 172 unused cells and 321 unused wires.
<suppressed ~186 debug messages>

3.10. Executing CHECK pass (checking for obvious problems).
checking module UARTTest..
found and reported 0 problems.

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
<suppressed ~93 debug messages>
Removed a total of 31 cells.

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\uart0.$procmux$350.
    dead port 2/2 on $mux $flatten\uart0.$procmux$357.
    dead port 2/2 on $mux $flatten\uart0.$procmux$364.
    dead port 2/2 on $mux $flatten\uart0.$procmux$371.
    dead port 2/2 on $mux $flatten\uart0.$procmux$294.
    dead port 2/2 on $mux $flatten\uart0.$procmux$379.
    dead port 2/2 on $mux $flatten\uart0.$procmux$387.
    dead port 2/2 on $mux $flatten\uart0.$procmux$296.
    dead port 2/2 on $mux $flatten\uart0.$procmux$395.
    dead port 2/2 on $mux $flatten\uart0.$procmux$403.
    dead port 2/2 on $mux $flatten\uart0.$procmux$411.
    dead port 2/2 on $mux $flatten\uart0.$procmux$304.
    dead port 2/2 on $mux $flatten\uart0.$procmux$306.
    dead port 2/2 on $mux $flatten\uart0.$procmux$314.
    dead port 2/2 on $mux $flatten\uart0.$procmux$316.
    dead port 2/2 on $mux $flatten\uart0.$procmux$324.
    dead port 2/2 on $mux $flatten\uart0.$procmux$326.
    dead port 2/2 on $mux $flatten\uart0.$procmux$334.
    dead port 2/2 on $mux $flatten\uart0.$procmux$336.
    dead port 2/2 on $mux $flatten\uart0.$procmux$343.
Removed 20 multiplexer ports.
<suppressed ~8 debug messages>

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$413: { $flatten\uart0.$procmux$380_CMP $flatten\uart0.$procmux$297_CMP $auto$opt_reduce.cc:134:opt_mux$832 }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$418: { $flatten\uart0.$procmux$380_CMP $flatten\uart0.$procmux$297_CMP $auto$opt_reduce.cc:134:opt_mux$834 }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$428: { $flatten\uart0.$procmux$380_CMP $flatten\uart0.$procmux$297_CMP $auto$opt_reduce.cc:134:opt_mux$836 }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$433: { $flatten\uart0.$procmux$380_CMP $flatten\uart0.$procmux$297_CMP $auto$opt_reduce.cc:134:opt_mux$838 }
  Optimizing cells in module \UARTTest.
Performed a total of 4 changes.

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 1-bit at position 0 on $procdff$829 ($dff) from module UARTTest.
Setting constant 0-bit at position 1 on $procdff$829 ($dff) from module UARTTest.
Setting constant 0-bit at position 2 on $procdff$829 ($dff) from module UARTTest.
Setting constant 0-bit at position 3 on $procdff$829 ($dff) from module UARTTest.
Setting constant 0-bit at position 4 on $procdff$829 ($dff) from module UARTTest.
Setting constant 0-bit at position 5 on $procdff$829 ($dff) from module UARTTest.
Setting constant 1-bit at position 6 on $procdff$829 ($dff) from module UARTTest.
Setting constant 0-bit at position 7 on $procdff$829 ($dff) from module UARTTest.

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 0 unused cells and 54 unused wires.
<suppressed ~1 debug messages>

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
Performed a total of 0 changes.

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.11.16. Finished OPT passes. (There is nothing left to do.)

3.12. Executing FSM pass (extract and optimize FSM).

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking UARTTest.uart0.tx_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
    Circuit seems to be self-resetting.

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\uart0.$procdff$827 ($dff) from module UARTTest (D = $flatten\uart0.$0\tx_data[7:0], Q = \uart0.tx_data).
Adding EN signal on $flatten\uart0.$procdff$826 ($dff) from module UARTTest (D = $flatten\uart0.$0\tx_bits_remaining[3:0], Q = \uart0.tx_bits_remaining).
Adding EN signal on $flatten\uart0.$procdff$825 ($dff) from module UARTTest (D = $flatten\uart0.$0\tx_state[1:0], Q = \uart0.tx_state).
Adding EN signal on $flatten\uart0.$procdff$824 ($dff) from module UARTTest (D = $flatten\uart0.$0\tx_out[0:0], Q = \uart0.tx_out).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.
<suppressed ~3 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$413: { $flatten\uart0.$procmux$380_CMP $flatten\uart0.$procmux$297_CMP }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$418: { $flatten\uart0.$procmux$380_CMP $flatten\uart0.$procmux$297_CMP }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$428: { $flatten\uart0.$procmux$380_CMP $flatten\uart0.$procmux$297_CMP }
  Optimizing cells in module \UARTTest.
Performed a total of 3 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
Performed a total of 0 changes.

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.13.23. Finished OPT passes. (There is nothing left to do.)

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell UARTTest.$auto$opt_dff.cc:218:make_patterns_logic$844 ($ne).
Removed cell UARTTest.$flatten\uart0.$procmux$409 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$393 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$385 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$377 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$362 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$355 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$348 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$341 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$332 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$312 ($mux).
Removed top 1 bits (of 11) from mux cell UARTTest.$flatten\uart0.$procmux$302 ($mux).
Removed top 1 bits (of 2) from port B of cell UARTTest.$flatten\uart0.$procmux$297_CMP0 ($eq).
Removed top 1 bits (of 2) from mux cell UARTTest.$flatten\uart0.$ternary$uart.v:301$36 ($mux).
Removed top 1 bits (of 8) from wire UARTTest.$flatten\uart0.$3\tx_data[7:0].
Removed top 1 bits (of 8) from wire UARTTest.$flatten\uart0.$4\tx_data[7:0].
Removed top 1 bits (of 11) from wire UARTTest.$flatten\uart0.$5\tx_clk[10:0].
Removed top 1 bits (of 2) from wire UARTTest.$flatten\uart0.$ternary$uart.v:301$36_Y.

3.15. Executing PEEPOPT pass (run peephole optimizers).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

3.17. Executing SHARE pass (SAT-based resource sharing).

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

3.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.21.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/dsp_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__MUL18X18'.
Successfully finished Verilog frontend.

3.21.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

3.22. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module UARTTest:
  creating $macc model for $flatten\uart0.$sub$uart.v:149$15 ($sub).
  creating $macc model for $flatten\uart0.$sub$uart.v:283$34 ($sub).
  creating $alu model for $macc $flatten\uart0.$sub$uart.v:283$34.
  creating $alu model for $macc $flatten\uart0.$sub$uart.v:149$15.
  creating $alu cell for $flatten\uart0.$sub$uart.v:149$15: $auto$alumacc.cc:485:replace_alu$881
  creating $alu cell for $flatten\uart0.$sub$uart.v:283$34: $auto$alumacc.cc:485:replace_alu$884
  created 2 $alu and 0 $macc cells.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
Performed a total of 0 changes.

3.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.23.6. Executing OPT_DFF pass (perform DFF optimizations).

3.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.23.9. Finished OPT passes. (There is nothing left to do.)

3.24. Executing MEMORY pass.

3.24.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.24.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.24.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.24.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.24.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.24.6. Executing MEMORY_COLLECT pass (generating $mem cells).

3.25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.26. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

3.27. Executing TECHMAP pass (map to technology primitives).

3.27.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ECP5_DP16KD'.
Generating RTLIL representation for module `\$__ECP5_PDPW16KD'.
Successfully finished Verilog frontend.

3.27.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.28. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

3.29. Executing TECHMAP pass (map to technology primitives).

3.29.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/lutrams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/lutrams_map.v' to AST representation.
Generating RTLIL representation for module `\$__TRELLIS_DPR16X4'.
Successfully finished Verilog frontend.

3.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

3.30. Executing OPT pass (performing simple optimizations).

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.
<suppressed ~10 debug messages>

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.30.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$876 ($dffe) from module UARTTest (D = $flatten\uart0.$3\tx_out[0:0], Q = \uart0.tx_out, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$860 ($dffe) from module UARTTest (D = $flatten\uart0.$3\tx_bits_remaining[3:0], Q = \uart0.tx_bits_remaining, rval = 4'1000).
Adding SRST signal on $auto$opt_dff.cc:764:run$849 ($dffe) from module UARTTest (D = \uart0.tx_data [7:1], Q = \uart0.tx_data [6:0], rval = 7'1000001).

3.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 2 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

3.30.5. Rerunning OPT passes. (Removed registers in this run.)

3.30.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.30.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.30.8. Executing OPT_DFF pass (perform DFF optimizations).

3.30.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.30.10. Finished fast OPT passes.

3.31. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.32. Executing OPT pass (performing simple optimizations).

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
    Consolidated identical input bits for $mux cell $flatten\uart0.$procmux$302:
      Old ports: A=10'1000100000, B=10'0011100010, Y=$auto$wreduce.cc:454:run$879 [9:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:454:run$879 [9] $auto$wreduce.cc:454:run$879 [1] }
      New connections: { $auto$wreduce.cc:454:run$879 [8:2] $auto$wreduce.cc:454:run$879 [0] } = { 1'0 $auto$wreduce.cc:454:run$879 [1] $auto$wreduce.cc:454:run$879 [1] 5'10000 }
    Consolidated identical input bits for $mux cell $flatten\uart0.$procmux$413:
      Old ports: A=8'01000001, B={ 1'0 \uart0.tx_data [7:1] }, Y=$flatten\uart0.$0\tx_data[7:0]
      New ports: A=7'1000001, B=\uart0.tx_data [7:1], Y=$flatten\uart0.$0\tx_data[7:0] [6:0]
      New connections: $flatten\uart0.$0\tx_data[7:0] [7] = 1'0
    Consolidated identical input bits for $mux cell $flatten\uart0.$ternary$uart.v:306$37:
      Old ports: A=2'00, B=2'11, Y=$flatten\uart0.$ternary$uart.v:306$37_Y
      New ports: A=1'0, B=1'1, Y=$flatten\uart0.$ternary$uart.v:306$37_Y [0]
      New connections: $flatten\uart0.$ternary$uart.v:306$37_Y [1] = $flatten\uart0.$ternary$uart.v:306$37_Y [0]
  Optimizing cells in module \UARTTest.
Performed a total of 3 changes.

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.32.9. Rerunning OPT passes. (Maybe there is more to do..)

3.32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
Performed a total of 0 changes.

3.32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.32.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$849 ($dffe) from module UARTTest.

3.32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.32.16. Rerunning OPT passes. (Maybe there is more to do..)

3.32.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.32.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
Performed a total of 0 changes.

3.32.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.32.20. Executing OPT_DFF pass (perform DFF optimizations).

3.32.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.32.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.32.23. Finished OPT passes. (There is nothing left to do.)

3.33. Executing TECHMAP pass (map to technology primitives).

3.33.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.33.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ecp5_alu'.
Successfully finished Verilog frontend.

3.33.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=1\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=11\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~350 debug messages>

3.34. Executing OPT pass (performing simple optimizations).

3.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.
<suppressed ~118 debug messages>

3.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

3.34.3. Executing OPT_DFF pass (perform DFF optimizations).

3.34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 21 unused cells and 185 unused wires.
<suppressed ~22 debug messages>

3.34.5. Finished fast OPT passes.

3.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.36. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

3.37. Executing TECHMAP pass (map to technology primitives).

3.37.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

3.37.2. Continuing TECHMAP pass.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'1 for cells of type $_DFFE_PP_.
Using template $paramod\$_DFF_P_\_TECHMAP_WIREINIT_Q_=1'0 for cells of type $_DFF_P_.
Using template $paramod\$_DFF_P_\_TECHMAP_WIREINIT_Q_=1'1 for cells of type $_DFF_P_.
Using template \$_SDFFE_PP0P_ for cells of type $_SDFFE_PP0P_.
Using template $paramod\$_DFF_P_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_P_.
Using template \$_SDFFE_PP1P_ for cells of type $_SDFFE_PP1P_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'0 for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~147 debug messages>

3.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.39. Executing SIMPLEMAP pass (map simple cells to gate primitives).

3.40. Executing ECP5_GSR pass (implement FF init values).
Handling GSR in UARTTest.

3.41. Executing ATTRMVCP pass (move or copy attributes).

3.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 0 unused cells and 133 unused wires.
<suppressed ~1 debug messages>

3.43. Executing TECHMAP pass (map to technology primitives).

3.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

3.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.44. Executing ABC pass (technology mapping using ABC).

3.44.1. Extracting gate netlist of module `\UARTTest' to `<abc-temp-dir>/input.blif'..
Extracted 158 gates and 191 wires to a netlist network with 31 inputs and 34 outputs.

3.44.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + dress 
ABC: Total number of equiv classes                =      35.
ABC: Participating nodes from both networks       =      95.
ABC: Participating nodes from the first network   =      44. (  81.48 % of nodes)
ABC: Participating nodes from the second network  =      51. (  94.44 % of nodes)
ABC: Node pairs (any polarity)                    =      44. (  81.48 % of names can be moved)
ABC: Node pairs (same polarity)                   =      39. (  72.22 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

3.44.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       53
ABC RESULTS:        internal signals:      126
ABC RESULTS:           input signals:       31
ABC RESULTS:          output signals:       34
Removing temp directory.
Removed 0 unused cells and 113 unused wires.

3.45. Executing TECHMAP pass (map to technology primitives).

3.45.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.45.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod$2ddb5b5cad1eda4b448691edd161080bb92bfe50\$lut for cells of type $lut.
Using template $paramod$89a7c44637a153ae876a5df3b846d5543893af1c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10000000100000001000000011111111 for cells of type $lut.
Using template $paramod$f275b2d97237f5f7d3462ef47444def2125c8869\$lut for cells of type $lut.
Using template $paramod$629bea346f0daddb39cb1ebf17c36b3d1144d5d1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=33023 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod$74303b63fa170e00cba212e866b4c6c39b46b2d1\$lut for cells of type $lut.
Using template $paramod$fc4ca8f0b7150809e177c4fa12feccd73bbbb2e3\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010000000111111 for cells of type $lut.
Using template $paramod$43d36707918893cdc94f3173e86faa45633b8ce7\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=8323072 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000001 for cells of type $lut.
Using template $paramod$b1bd2a921ec0f1ea0cc7578a2bcf32d761c7f62f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
No more expansions possible.
<suppressed ~460 debug messages>

3.46. Executing OPT_LUT_INS pass (discard unused LUT inputs).
Optimizing LUTs in UARTTest.
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1533.lut2 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1533.lut3 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1555.lut2 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1555.lut3 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1555.lut4 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1555.lut5 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1555.lut6 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1555.lut7 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1552.lut2 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1552.lut3 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1547.lut2 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1547.lut3 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1547.lut4 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1547.lut5 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1547.lut6 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1548.lut1 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1540.lut2 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1540.lut3 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1540.lut4 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1540.lut5 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1540.lut6 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1535.lut2 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1535.lut3 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1549.lut2 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1549.lut3 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1549.lut4 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1549.lut5 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1549.lut6 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1550.lut1 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1545.lut2 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1545.lut3 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1545.lut4 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1545.lut5 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1545.lut6 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1545.lut7 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1532.lut2 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1532.lut3 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1519.lut1 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1519.lut2 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1519.lut4 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1519.lut5 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1519.lut6 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1525.lut1 (4 -> 3)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1520.lut2 (4 -> 3)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1520.lut3 (4 -> 3)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1524.lut7 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1520.lut1 (4 -> 3)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1519.lut0 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1526.lut1 (4 -> 3)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1532.lut0 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1533.lut0 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1535.lut0 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1540.lut0 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1540.lut1 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1545.lut0 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1541.lut1 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1547.lut0 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1549.lut0 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1547.lut1 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1552.lut0 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1549.lut1 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1554.lut0 (4 -> 0)
  Optimizing lut $abc$1518$auto$blifparse.cc:498:parse_blif$1555.lut0 (4 -> 0)
Removed 0 unused cells and 93 unused wires.

3.47. Executing AUTONAME pass.
Renamed 2058 objects in module UARTTest (42 iterations).
<suppressed ~381 debug messages>

3.48. Executing HIERARCHY pass (managing design hierarchy).

3.48.1. Analyzing design hierarchy..
Top module:  \UARTTest

3.48.2. Analyzing design hierarchy..
Top module:  \UARTTest
Removed 0 unused modules.

3.49. Printing statistics.

=== UARTTest ===

   Number of wires:                189
   Number of wire bits:            352
   Number of public wires:         189
   Number of public wire bits:     352
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                216
     CCU2C                           6
     L6MUX21                        26
     LUT4                          113
     PFUMX                          44
     TRELLIS_FF                     27

3.50. Executing CHECK pass (checking for obvious problems).
checking module UARTTest..
found and reported 0 problems.

3.51. Executing JSON backend.

End of script. Logfile hash: c916223b6e, CPU: user 2.98s system 0.56s, MEM: 248.18 MB peak
Yosys 0.9+3578 (git sha1 ed579038, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 50% 15x read_verilog (1 sec), 12% 8x techmap (0 sec), ...
nextpnr-ecp5 --json UARTTest.json --textcfg UARTTest_out.config --um5g-85k --package CABGA381 --lpf ecp5.lpf


Info: Logic utilisation before packing:
Info:     Total LUT4s:       125/83640     0%
Info:         logic LUTs:    113/83640     0%
Info:         carry LUTs:     12/83640     0%
Info:           RAM LUTs:      0/41820     0%
Info:          RAMW LUTs:      0/20910     0%

Info:      Total DFFs:        54/83640     0%

Info: Packing IOs..
Info: pin 'RS232_Rx$tr_io' constrained to Bel 'X0/Y92/PIOB'.
Info: pin 'RS232_Tx$tr_io' constrained to Bel 'X0/Y92/PIOC'.
Info: pin 'clk$tr_io' constrained to Bel 'X63/Y0/PIOA'.
Info: pin 'led$tr_io' constrained to Bel 'X76/Y0/PIOB'.
Info: pin 'rxout$tr_io' constrained to Bel 'X126/Y92/PIOC'.
Info: Packing constants..
Info: Packing carries...
Info: Finding LUTFF pairs...
Info: Packing LUT5-7s...
Info: Finding LUT-LUT pairs...
Info: Packing paired LUTs into a SLICE...
Info: Packing unpaired LUTs into a SLICE...
Info: Packing unpaired FFs into a SLICE...
Info: Generating derived timing constraints...
Info: Promoting globals...
Info:     promoting clock net clk$TRELLIS_IO_IN to global network
Info: Checksum: 0x540940ee

Info: Annotating ports with timing budgets for target frequency 12.00 MHz
Info: Checksum: 0x803b1d75

Info: Device utilisation:
Info: 	       TRELLIS_SLICE:    76/41820     0%
Info: 	          TRELLIS_IO:     5/  365     1%
Info: 	                DCCA:     1/   56     1%
Info: 	              DP16KD:     0/  208     0%
Info: 	          MULT18X18D:     0/  156     0%
Info: 	              ALU54B:     0/   78     0%
Info: 	             EHXPLLL:     0/    4     0%
Info: 	             EXTREFB:     0/    2     0%
Info: 	                DCUA:     0/    2     0%
Info: 	           PCSCLKDIV:     0/    2     0%
Info: 	             IOLOGIC:     0/  224     0%
Info: 	            SIOLOGIC:     0/  141     0%
Info: 	                 GSR:     0/    1     0%
Info: 	               JTAGG:     0/    1     0%
Info: 	                OSCG:     0/    1     0%
Info: 	               SEDGA:     0/    1     0%
Info: 	                 DTR:     0/    1     0%
Info: 	             USRMCLK:     0/    1     0%
Info: 	             CLKDIVF:     0/    4     0%
Info: 	           ECLKSYNCB:     0/   10     0%
Info: 	             DLLDELD:     0/    8     0%
Info: 	              DDRDLL:     0/    4     0%
Info: 	             DQSBUFM:     0/   14     0%
Info: 	     TRELLIS_ECLKBUF:     0/    8     0%
Info: 	        ECLKBRIDGECS:     0/    2     0%

Info: Placed 5 cells based on constraints.
Info: Creating initial analytic placement for 43 cells, random placement wirelen = 7771.
Info:     at initial placer iter 0, wirelen = 254
Info:     at initial placer iter 1, wirelen = 237
Info:     at initial placer iter 2, wirelen = 247
Info:     at initial placer iter 3, wirelen = 242
Info: Running main analytical placer.
Info:     at iteration #1, type TRELLIS_SLICE: wirelen solved = 243, spread = 443, legal = 473; time = 0.01s
Info:     at iteration #2, type TRELLIS_SLICE: wirelen solved = 263, spread = 441, legal = 466; time = 0.01s
Info:     at iteration #3, type TRELLIS_SLICE: wirelen solved = 272, spread = 412, legal = 447; time = 0.01s
Info:     at iteration #4, type TRELLIS_SLICE: wirelen solved = 268, spread = 434, legal = 437; time = 0.02s
Info:     at iteration #5, type TRELLIS_SLICE: wirelen solved = 272, spread = 426, legal = 457; time = 0.01s
Info:     at iteration #6, type TRELLIS_SLICE: wirelen solved = 291, spread = 439, legal = 451; time = 0.01s
Info:     at iteration #7, type TRELLIS_SLICE: wirelen solved = 300, spread = 429, legal = 438; time = 0.01s
Info:     at iteration #8, type TRELLIS_SLICE: wirelen solved = 295, spread = 428, legal = 424; time = 0.01s
Info:     at iteration #9, type TRELLIS_SLICE: wirelen solved = 307, spread = 408, legal = 436; time = 0.01s
Info:     at iteration #10, type TRELLIS_SLICE: wirelen solved = 314, spread = 406, legal = 430; time = 0.01s
Info:     at iteration #11, type TRELLIS_SLICE: wirelen solved = 318, spread = 398, legal = 429; time = 0.01s
Info:     at iteration #12, type TRELLIS_SLICE: wirelen solved = 330, spread = 438, legal = 455; time = 0.01s
Info:     at iteration #13, type TRELLIS_SLICE: wirelen solved = 351, spread = 438, legal = 466; time = 0.01s
Info: HeAP Placer Time: 0.28s
Info:   of which solving equations: 0.09s
Info:   of which spreading cells: 0.06s
Info:   of which strict legalisation: 0.00s

Info: Running simulated annealing placer for refinement.
Info:   at iteration #1: temp = 0.000000, timing cost = 10, wirelen = 424
Info:   at iteration #5: temp = 0.000000, timing cost = 10, wirelen = 389
Info:   at iteration #8: temp = 0.000000, timing cost = 10, wirelen = 377 
Info: SA placement time 0.07s

Info: Max frequency for clock '$glbnet$clk$TRELLIS_IO_IN': 216.08 MHz (PASS at 12.00 MHz)

Info: Max delay posedge $glbnet$clk$TRELLIS_IO_IN -> <async>: 10.22 ns

Info: Slack histogram:
Info:  legend: * represents 1 endpoint(s)
Info:          + represents [1,1) endpoint(s)
Info: [ 73110,  73567) |* 
Info: [ 73567,  74024) | 
Info: [ 74024,  74481) | 
Info: [ 74481,  74938) |* 
Info: [ 74938,  75395) | 
Info: [ 75395,  75852) | 
Info: [ 75852,  76309) | 
Info: [ 76309,  76766) | 
Info: [ 76766,  77223) | 
Info: [ 77223,  77680) | 
Info: [ 77680,  78137) | 
Info: [ 78137,  78594) | 
Info: [ 78594,  79051) |********* 
Info: [ 79051,  79508) |********** 
Info: [ 79508,  79965) | 
Info: [ 79965,  80422) | 
Info: [ 80422,  80879) |********* 
Info: [ 80879,  81336) |** 
Info: [ 81336,  81793) |*********** 
Info: [ 81793,  82250) |******* 
Info: Checksum: 0x2776db2f
Info: Routing globals...
Info:     routing clock net $glbnet$clk$TRELLIS_IO_IN using global 0

Info: Routing..
Info: Setting up routing queue.
Info: Routing 382 arcs.
Info:            |   (re-)routed arcs  |   delta    | remaining|       time spent     |
Info:    IterCnt |  w/ripup   wo/ripup |  w/r  wo/r |      arcs| batch(sec) total(sec)|
Info:        382 |        0        382 |    0   382 |         0|       0.44       0.44|
Info: Routing complete.
Info: Router1 time 0.44s
Info: Checksum: 0xbaf97ba1

Info: Critical path report for clock '$glbnet$clk$TRELLIS_IO_IN' (posedge -> posedge):
Info: curr total
Info:  0.3  0.3  Source transmit_LUT4_D_Z_PFUMX_Z_C0_LUT4_D_Z_L6MUX21_Z_3_D1_L6MUX21_Z_D0_PFUMX_Z_SLICE.Q1
Info:  0.9  1.3    Net uart0.tx_clk[6] budget 18.070999 ns (3,83) -> (6,84)
Info:                Sink transmit_LUT4_D_Z_PFUMX_Z_C0_CCU2C_S1_S0_CCU2C_S0$CCU2_SLICE.A0
Info:                Defined in:
Info:                  UARTTest.v:24.10-36.7
Info:                  uart.v:99.34-99.40
Info:  0.3  1.5  Source transmit_LUT4_D_Z_PFUMX_Z_C0_CCU2C_S1_S0_CCU2C_S0$CCU2_SLICE.FCO
Info:  0.0  1.5    Net transmit_LUT4_D_Z_PFUMX_Z_1_C0_CCU2C_S0_COUT[6] budget 0.000000 ns (6,84) -> (6,84)
Info:                Sink transmit_LUT4_D_Z_PFUMX_Z_C0_CCU2C_S1$CCU2_SLICE.FCI
Info:                Defined in:
Info:                  UARTTest.v:24.10-36.7
Info:                  uart.v:149.22-149.35
Info:                  /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info:  0.3  1.8  Source transmit_LUT4_D_Z_PFUMX_Z_C0_CCU2C_S1$CCU2_SLICE.F0
Info:  0.9  2.6    Net transmit_LUT4_D_Z_PFUMX_Z_C0_CCU2C_S1_S0[0] budget 18.070999 ns (6,84) -> (6,83)
Info:                Sink transmit_LUT4_D_Z_L6MUX21_Z_D0_L6MUX21_Z_D1_PFUMX_Z_SLICE.A0
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.2  2.9  Source transmit_LUT4_D_Z_L6MUX21_Z_D0_L6MUX21_Z_D1_PFUMX_Z_SLICE.OFX0
Info:  0.0  2.9    Net transmit_LUT4_D_Z_L6MUX21_Z_D0_L6MUX21_Z_D1 budget 0.000000 ns (6,83) -> (6,83)
Info:                Sink transmit_LUT4_D_Z_L6MUX21_Z_D0_L6MUX21_Z_D1_PFUMX_Z_SLICE.FXB
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:158.54-158.56
Info:  0.1  3.0  Source transmit_LUT4_D_Z_L6MUX21_Z_D0_L6MUX21_Z_D1_PFUMX_Z_SLICE.OFX1
Info:  0.0  3.0    Net transmit_LUT4_D_Z_L6MUX21_Z_D0 budget 0.000000 ns (6,83) -> (6,83)
Info:                Sink transmit_LUT4_D_Z_L6MUX21_Z_D1_L6MUX21_Z_D0_PFUMX_Z_SLICE.FXA
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:158.66-158.68
Info:  0.1  3.2  Source transmit_LUT4_D_Z_L6MUX21_Z_D1_L6MUX21_Z_D0_PFUMX_Z_SLICE.OFX1
Info:  0.9  4.0    Net led_LUT4_C_Z[3] budget 20.365000 ns (6,83) -> (6,86)
Info:                Sink uart0.tx_state_TRELLIS_FF_Q_CE_L6MUX21_Z_D0_PFUMX_Z_SLICE.D1
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.2  4.3  Source uart0.tx_state_TRELLIS_FF_Q_CE_L6MUX21_Z_D0_PFUMX_Z_SLICE.OFX0
Info:  0.0  4.3    Net uart0.tx_state_TRELLIS_FF_Q_CE_L6MUX21_Z_D0 budget 0.000000 ns (6,86) -> (6,86)
Info:                Sink uart0.tx_state_TRELLIS_FF_Q_CE_L6MUX21_Z_D1_PFUMX_Z_SLICE.FXA
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:142.34-142.36
Info:  0.1  4.4  Source uart0.tx_state_TRELLIS_FF_Q_CE_L6MUX21_Z_D1_PFUMX_Z_SLICE.OFX1
Info:  0.9  5.3    Net uart0.tx_state_TRELLIS_FF_Q_CE budget 20.365000 ns (6,86) -> (6,87)
Info:                Sink uart0.tx_state_TRELLIS_FF_Q_DI_L6MUX21_Z_SD_LUT4_Z_SLICE.CE
Info:  0.0  5.3  Setup uart0.tx_state_TRELLIS_FF_Q_DI_L6MUX21_Z_SD_LUT4_Z_SLICE.CE
Info: 1.7 ns logic, 3.5 ns routing

Info: Critical path report for cross-domain path 'posedge $glbnet$clk$TRELLIS_IO_IN' -> '<async>':
Info: curr total
Info:  0.3  0.3  Source uart0.tx_state_TRELLIS_FF_Q_DI_L6MUX21_Z_D1_PFUMX_Z_SLICE.Q1
Info:  0.5  0.8    Net uart0.tx_state[0] budget 20.365999 ns (5,87) -> (6,87)
Info:                Sink led_LUT4_C_SLICE.D1
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.1  0.9  Source led_LUT4_C_SLICE.F1
Info:  6.0  7.0    Net rxout$TRELLIS_IO_OUT budget 41.442001 ns (6,87) -> (76,0)
Info:                Sink led$tr_io.I
Info:                Defined in:
Info:                  UARTTest.v:24.10-36.7
Info:                  uart.v:60.17-60.32
Info: 0.4 ns logic, 6.5 ns routing

Info: Max frequency for clock '$glbnet$clk$TRELLIS_IO_IN': 189.65 MHz (PASS at 12.00 MHz)

Info: Max delay posedge $glbnet$clk$TRELLIS_IO_IN -> <async>: 6.98 ns

Info: Slack histogram:
Info:  legend: * represents 1 endpoint(s)
Info:          + represents [1,1) endpoint(s)
Info: [ 76349,  76656) |* 
Info: [ 76656,  76963) | 
Info: [ 76963,  77270) | 
Info: [ 77270,  77577) | 
Info: [ 77577,  77884) |* 
Info: [ 77884,  78191) |* 
Info: [ 78191,  78498) |*********** 
Info: [ 78498,  78805) |**** 
Info: [ 78805,  79112) |*** 
Info: [ 79112,  79419) | 
Info: [ 79419,  79726) | 
Info: [ 79726,  80033) | 
Info: [ 80033,  80340) |**** 
Info: [ 80340,  80647) |***** 
Info: [ 80647,  80954) |** 
Info: [ 80954,  81261) |***** 
Info: [ 81261,  81568) |******* 
Info: [ 81568,  81875) | 
Info: [ 81875,  82182) |** 
Info: [ 82182,  82489) |**** 
ecppack --svf UARTTest.svf UARTTest_out.config UARTTest.bit
rm UARTTest.json UARTTest_out.config
