yosys -p "synth_ecp5 -json UARTTest.json -top UARTTest" UARTTest.v uart.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3578 (git sha1 ed579038, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Parsing `UARTTest.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: UARTTest.v
Parsing Verilog input from `UARTTest.v' to AST representation.
Generating RTLIL representation for module `\UARTTest'.
Successfully finished Verilog frontend.

-- Parsing `uart.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: uart.v
Parsing Verilog input from `uart.v' to AST representation.
Generating RTLIL representation for module `\uart'.
Successfully finished Verilog frontend.

-- Running command `synth_ecp5 -json UARTTest.json -top UARTTest' --

3. Executing SYNTH_ECP5 pass.

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\$__ABC9_LUT5'.
Generating RTLIL representation for module `\$__ABC9_LUT6'.
Generating RTLIL representation for module `\$__ABC9_LUT7'.
Generating RTLIL representation for module `\L6MUX21'.
Generating RTLIL representation for module `\CCU2C'.
Generating RTLIL representation for module `\TRELLIS_RAM16X2'.
Generating RTLIL representation for module `\PFUMX'.
Generating RTLIL representation for module `\TRELLIS_DPR16X4'.
Generating RTLIL representation for module `\DPR16X4C'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\TRELLIS_FF'.
Generating RTLIL representation for module `\TRELLIS_IO'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\TRELLIS_SLICE'.
Generating RTLIL representation for module `\DP16KD'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_bb.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\MULT18X18D'.
Generating RTLIL representation for module `\ALU54B'.
Generating RTLIL representation for module `\EHXPLLL'.
Generating RTLIL representation for module `\DTR'.
Generating RTLIL representation for module `\OSCG'.
Generating RTLIL representation for module `\USRMCLK'.
Generating RTLIL representation for module `\JTAGG'.
Generating RTLIL representation for module `\DELAYF'.
Generating RTLIL representation for module `\DELAYG'.
Generating RTLIL representation for module `\IDDRX1F'.
Generating RTLIL representation for module `\IDDRX2F'.
Generating RTLIL representation for module `\IDDR71B'.
Generating RTLIL representation for module `\IDDRX2DQA'.
Generating RTLIL representation for module `\ODDRX1F'.
Generating RTLIL representation for module `\ODDRX2F'.
Generating RTLIL representation for module `\ODDR71B'.
Generating RTLIL representation for module `\OSHX2A'.
Generating RTLIL representation for module `\ODDRX2DQA'.
Generating RTLIL representation for module `\ODDRX2DQSB'.
Generating RTLIL representation for module `\TSHX2DQA'.
Generating RTLIL representation for module `\TSHX2DQSA'.
Generating RTLIL representation for module `\DQSBUFM'.
Generating RTLIL representation for module `\DDRDLLA'.
Generating RTLIL representation for module `\CLKDIVF'.
Generating RTLIL representation for module `\ECLKSYNCB'.
Generating RTLIL representation for module `\ECLKBRIDGECS'.
Generating RTLIL representation for module `\DCCA'.
Generating RTLIL representation for module `\DCUA'.
Generating RTLIL representation for module `\EXTREFB'.
Generating RTLIL representation for module `\PCSCLKDIV'.
Generating RTLIL representation for module `\PUR'.
Generating RTLIL representation for module `\GSR'.
Generating RTLIL representation for module `\SGSR'.
Generating RTLIL representation for module `\PDPW16KD'.
Successfully finished Verilog frontend.

3.3. Executing HIERARCHY pass (managing design hierarchy).

3.3.1. Analyzing design hierarchy..
Top module:  \UARTTest
Used module:     \uart

3.3.2. Analyzing design hierarchy..
Top module:  \UARTTest
Used module:     \uart
Removed 0 unused modules.

3.4. Executing PROC pass (convert processes to netlists).

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$185'.
Cleaned up 1 empty switch.

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$265 in module TRELLIS_FF.
Removed 2 dead cases from process $proc$uart.v:135$10 in module uart.
Marked 17 switch rules as full_case in process $proc$uart.v:135$10 in module uart.
Removed a total of 2 dead cases.

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 19 assignments to connections.

3.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$269'.
  Set init value: \Q = 1'0
Found init rule in `\uart.$proc$uart.v:106$39'.
  Set init value: \tx_state = 2'00
Found init rule in `\uart.$proc$uart.v:105$38'.
  Set init value: \tx_out = 1'1
Found init rule in `\uart.$proc$uart.v:101$37'.
  Set init value: \recv_state = 3'000

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$269'.
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$265'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$262'.
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$241'.
     1/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$240_EN[3:0]$244
     2/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$240_DATA[3:0]$243
     3/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$240_ADDR[3:0]$242
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$208'.
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$186'.
     1/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$184_EN[3:0]$189
     2/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$184_DATA[3:0]$188
     3/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$184_ADDR[3:0]$187
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$185'.
Creating decoders for process `\uart.$proc$uart.v:106$39'.
Creating decoders for process `\uart.$proc$uart.v:105$38'.
Creating decoders for process `\uart.$proc$uart.v:101$37'.
Creating decoders for process `\uart.$proc$uart.v:135$10'.
     1/57: $5\tx_state[1:0]
     2/57: $5\tx_clk[10:0]
     3/57: $4\tx_data[7:0]
     4/57: $4\tx_out[0:0]
     5/57: $4\tx_bits_remaining[3:0]
     6/57: $3\tx_data[7:0]
     7/57: $3\tx_bits_remaining[3:0]
     8/57: $4\tx_state[1:0]
     9/57: $3\tx_out[0:0]
    10/57: $4\tx_clk[10:0]
    11/57: $3\tx_state[1:0]
    12/57: $2\tx_bits_remaining[3:0]
    13/57: $2\tx_out[0:0]
    14/57: $3\tx_clk[10:0]
    15/57: $2\tx_data[7:0]
    16/57: $1\tx_data[7:0]
    17/57: $1\tx_bits_remaining[3:0]
    18/57: $2\tx_state[1:0]
    19/57: $1\tx_out[0:0]
    20/57: $2\tx_clk[10:0]
    21/57: $9\recv_state[2:0]
    22/57: $8\recv_state[2:0]
    23/57: $8\rx_clk[14:0]
    24/57: $3\rx_data[7:0]
    25/57: $7\recv_state[2:0]
    26/57: $7\rx_clk[14:0]
    27/57: $4\rx_bits_remaining[3:0]
    28/57: $5\rx_sample_countdown[3:0]
    29/57: $6\rx_samples[3:0]
    30/57: $2\rx_data[7:0]
    31/57: $5\rx_samples[3:0]
    32/57: $6\recv_state[2:0]
    33/57: $4\rx_sample_countdown[3:0]
    34/57: $6\rx_clk[14:0]
    35/57: $4\rx_samples[3:0]
    36/57: $3\rx_sample_countdown[3:0]
    37/57: $3\rx_samples[3:0]
    38/57: $5\recv_state[2:0]
    39/57: $3\rx_bits_remaining[3:0]
    40/57: $5\rx_clk[14:0]
    41/57: $2\rx_bits_remaining[3:0]
    42/57: $4\recv_state[2:0]
    43/57: $4\rx_clk[14:0]
    44/57: $2\rx_sample_countdown[3:0]
    45/57: $2\rx_samples[3:0]
    46/57: $3\recv_state[2:0]
    47/57: $3\rx_clk[14:0]
    48/57: $2\recv_state[2:0]
    49/57: $2\rx_clk[14:0]
    50/57: $1\rx_data[7:0]
    51/57: $1\rx_bits_remaining[3:0]
    52/57: $1\rx_sample_countdown[3:0]
    53/57: $1\rx_samples[3:0]
    54/57: $1\tx_clk[10:0]
    55/57: $1\rx_clk[14:0]
    56/57: $1\tx_state[1:0]
    57/57: $1\recv_state[2:0]
Creating decoders for process `\UARTTest.$proc$UARTTest.v:41$2'.
     1/1: $0\led_set[0:0]

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\TRELLIS_FF.\Q' using process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$265'.
  created $dff cell `$procdff$805' with positive edge clock.
Creating register for signal `\DPR16X4C.\i' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$262'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$240_ADDR' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$241'.
  created $dff cell `$procdff$806' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$240_DATA' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$241'.
  created $dff cell `$procdff$807' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$240_EN' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$241'.
  created $dff cell `$procdff$808' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\i' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$208'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$184_ADDR' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$186'.
  created $dff cell `$procdff$809' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$184_DATA' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$186'.
  created $dff cell `$procdff$810' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$184_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$186'.
  created $dff cell `$procdff$811' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\muxwre' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$185'.
  created direct connection (no actual register cell created).
Creating register for signal `\uart.\rx_samples' using process `\uart.$proc$uart.v:135$10'.
  created $dff cell `$procdff$812' with positive edge clock.
Creating register for signal `\uart.\rx_sample_countdown' using process `\uart.$proc$uart.v:135$10'.
  created $dff cell `$procdff$813' with positive edge clock.
Creating register for signal `\uart.\rx_clk' using process `\uart.$proc$uart.v:135$10'.
  created $dff cell `$procdff$814' with positive edge clock.
Creating register for signal `\uart.\tx_clk' using process `\uart.$proc$uart.v:135$10'.
  created $dff cell `$procdff$815' with positive edge clock.
Creating register for signal `\uart.\recv_state' using process `\uart.$proc$uart.v:135$10'.
  created $dff cell `$procdff$816' with positive edge clock.
Creating register for signal `\uart.\rx_bits_remaining' using process `\uart.$proc$uart.v:135$10'.
  created $dff cell `$procdff$817' with positive edge clock.
Creating register for signal `\uart.\rx_data' using process `\uart.$proc$uart.v:135$10'.
  created $dff cell `$procdff$818' with positive edge clock.
Creating register for signal `\uart.\tx_out' using process `\uart.$proc$uart.v:135$10'.
  created $dff cell `$procdff$819' with positive edge clock.
Creating register for signal `\uart.\tx_state' using process `\uart.$proc$uart.v:135$10'.
  created $dff cell `$procdff$820' with positive edge clock.
Creating register for signal `\uart.\tx_bits_remaining' using process `\uart.$proc$uart.v:135$10'.
  created $dff cell `$procdff$821' with positive edge clock.
Creating register for signal `\uart.\tx_data' using process `\uart.$proc$uart.v:135$10'.
  created $dff cell `$procdff$822' with positive edge clock.
Creating register for signal `\UARTTest.\led_set' using process `\UARTTest.$proc$UARTTest.v:41$2'.
  created $dff cell `$procdff$823' with positive edge clock.

3.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$269'.
Found and cleaned up 2 empty switches in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$265'.
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$265'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$262'.
Found and cleaned up 1 empty switch in `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$241'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$241'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$208'.
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$186'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$186'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$185'.
Removing empty process `uart.$proc$uart.v:106$39'.
Removing empty process `uart.$proc$uart.v:105$38'.
Removing empty process `uart.$proc$uart.v:101$37'.
Found and cleaned up 17 empty switches in `\uart.$proc$uart.v:135$10'.
Removing empty process `uart.$proc$uart.v:135$10'.
Found and cleaned up 1 empty switch in `\UARTTest.$proc$UARTTest.v:41$2'.
Removing empty process `UARTTest.$proc$UARTTest.v:41$2'.
Cleaned up 22 empty switches.

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module uart.
<suppressed ~1 debug messages>

3.6. Executing TRIBUF pass.

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.
<suppressed ~29 debug messages>

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 5 unused cells and 148 unused wires.
<suppressed ~12 debug messages>

3.10. Executing CHECK pass (checking for obvious problems).
checking module UARTTest..
Warning: Wire UARTTest.\uart0.tx_byte [7] is used but has no driver.
Warning: Wire UARTTest.\uart0.tx_byte [6] is used but has no driver.
Warning: Wire UARTTest.\uart0.tx_byte [5] is used but has no driver.
Warning: Wire UARTTest.\uart0.tx_byte [4] is used but has no driver.
Warning: Wire UARTTest.\uart0.tx_byte [3] is used but has no driver.
Warning: Wire UARTTest.\uart0.tx_byte [2] is used but has no driver.
Warning: Wire UARTTest.\uart0.tx_byte [1] is used but has no driver.
Warning: Wire UARTTest.\uart0.tx_byte [0] is used but has no driver.
Warning: Wire UARTTest.\uart0.transmit is used but has no driver.
found and reported 9 problems.

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
<suppressed ~309 debug messages>
Removed a total of 103 cells.

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\uart0.$procmux$467.
    dead port 2/2 on $mux $flatten\uart0.$procmux$477.
    dead port 2/2 on $mux $flatten\uart0.$procmux$479.
    dead port 2/2 on $mux $flatten\uart0.$procmux$488.
    dead port 2/2 on $mux $flatten\uart0.$procmux$333.
    dead port 2/2 on $mux $flatten\uart0.$procmux$497.
    dead port 2/2 on $mux $flatten\uart0.$procmux$335.
    dead port 2/2 on $mux $flatten\uart0.$procmux$506.
    dead port 2/2 on $mux $flatten\uart0.$procmux$515.
    dead port 2/2 on $mux $flatten\uart0.$procmux$524.
    dead port 2/2 on $mux $flatten\uart0.$procmux$342.
    dead port 2/2 on $mux $flatten\uart0.$procmux$533.
    dead port 2/2 on $mux $flatten\uart0.$procmux$544.
    dead port 2/2 on $mux $flatten\uart0.$procmux$546.
    dead port 2/2 on $mux $flatten\uart0.$procmux$556.
    dead port 2/2 on $mux $flatten\uart0.$procmux$566.
    dead port 2/2 on $mux $flatten\uart0.$procmux$349.
    dead port 2/2 on $mux $flatten\uart0.$procmux$576.
    dead port 2/2 on $mux $flatten\uart0.$procmux$586.
    dead port 2/2 on $mux $flatten\uart0.$procmux$598.
    dead port 2/2 on $mux $flatten\uart0.$procmux$600.
    dead port 2/2 on $mux $flatten\uart0.$procmux$612.
    dead port 2/2 on $mux $flatten\uart0.$procmux$614.
    dead port 2/2 on $mux $flatten\uart0.$procmux$356.
    dead port 2/2 on $mux $flatten\uart0.$procmux$626.
    dead port 2/2 on $mux $flatten\uart0.$procmux$628.
    dead port 2/2 on $mux $flatten\uart0.$procmux$640.
    dead port 2/2 on $mux $flatten\uart0.$procmux$642.
    dead port 2/2 on $mux $flatten\uart0.$procmux$654.
    dead port 2/2 on $mux $flatten\uart0.$procmux$656.
    dead port 2/2 on $mux $flatten\uart0.$procmux$363.
    dead port 2/2 on $mux $flatten\uart0.$procmux$667.
    dead port 2/2 on $mux $flatten\uart0.$procmux$678.
    dead port 2/2 on $mux $flatten\uart0.$procmux$689.
    dead port 2/2 on $mux $flatten\uart0.$procmux$370.
    dead port 2/2 on $mux $flatten\uart0.$procmux$700.
    dead port 2/2 on $mux $flatten\uart0.$procmux$711.
    dead port 2/2 on $mux $flatten\uart0.$procmux$723.
    dead port 2/2 on $mux $flatten\uart0.$procmux$735.
    dead port 2/2 on $mux $flatten\uart0.$procmux$378.
    dead port 2/2 on $mux $flatten\uart0.$procmux$386.
    dead port 2/2 on $mux $flatten\uart0.$procmux$394.
    dead port 2/2 on $mux $flatten\uart0.$procmux$402.
    dead port 2/2 on $mux $flatten\uart0.$procmux$410.
    dead port 2/2 on $mux $flatten\uart0.$procmux$293.
    dead port 2/2 on $mux $flatten\uart0.$procmux$295.
    dead port 2/2 on $mux $flatten\uart0.$procmux$303.
    dead port 2/2 on $mux $flatten\uart0.$procmux$305.
    dead port 2/2 on $mux $flatten\uart0.$procmux$313.
    dead port 2/2 on $mux $flatten\uart0.$procmux$315.
    dead port 2/2 on $mux $flatten\uart0.$procmux$323.
    dead port 2/2 on $mux $flatten\uart0.$procmux$325.
    dead port 2/2 on $mux $flatten\uart0.$procmux$443.
    dead port 2/2 on $mux $flatten\uart0.$procmux$453.
    dead port 2/2 on $mux $flatten\uart0.$procmux$455.
    dead port 2/2 on $mux $flatten\uart0.$procmux$465.
Removed 56 multiplexer ports.
<suppressed ~14 debug messages>

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$746: { $flatten\uart0.$procmux$724_CMP $flatten\uart0.$procmux$601_CMP $flatten\uart0.$procmux$547_CMP $flatten\uart0.$procmux$456_CMP $flatten\uart0.$procmux$740_CMP $auto$opt_reduce.cc:134:opt_mux$825 }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$412: { $flatten\uart0.$procmux$379_CMP $flatten\uart0.$procmux$296_CMP $auto$opt_reduce.cc:134:opt_mux$827 }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$755: { $flatten\uart0.$procmux$456_CMP $auto$opt_reduce.cc:134:opt_mux$829 }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$417: { $flatten\uart0.$procmux$379_CMP $flatten\uart0.$procmux$296_CMP $auto$opt_reduce.cc:134:opt_mux$831 }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$764: { $flatten\uart0.$procmux$601_CMP $flatten\uart0.$procmux$456_CMP $auto$opt_reduce.cc:134:opt_mux$833 }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$427: { $flatten\uart0.$procmux$379_CMP $flatten\uart0.$procmux$296_CMP $auto$opt_reduce.cc:134:opt_mux$835 }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$773: { $flatten\uart0.$procmux$601_CMP $flatten\uart0.$procmux$547_CMP $flatten\uart0.$procmux$456_CMP $auto$opt_reduce.cc:134:opt_mux$837 }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$432: { $flatten\uart0.$procmux$379_CMP $flatten\uart0.$procmux$296_CMP $auto$opt_reduce.cc:134:opt_mux$839 }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$782: { $flatten\uart0.$procmux$601_CMP $flatten\uart0.$procmux$547_CMP $flatten\uart0.$procmux$456_CMP $auto$opt_reduce.cc:134:opt_mux$841 }
  Optimizing cells in module \UARTTest.
Performed a total of 9 changes.

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 0 unused cells and 163 unused wires.
<suppressed ~1 debug messages>

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
Performed a total of 0 changes.

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.11.16. Finished OPT passes. (There is nothing left to do.)

3.12. Executing FSM pass (extract and optimize FSM).

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking UARTTest.uart0.recv_state as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.
Not marking UARTTest.uart0.tx_state as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$823 ($dff) from module UARTTest (D = \rxout, Q = \led_set).
Adding EN signal on $flatten\uart0.$procdff$822 ($dff) from module UARTTest (D = $flatten\uart0.$0\tx_data[7:0], Q = \uart0.tx_data).
Adding EN signal on $flatten\uart0.$procdff$821 ($dff) from module UARTTest (D = $flatten\uart0.$0\tx_bits_remaining[3:0], Q = \uart0.tx_bits_remaining).
Adding EN signal on $flatten\uart0.$procdff$820 ($dff) from module UARTTest (D = $flatten\uart0.$0\tx_state[1:0], Q = \uart0.tx_state).
Adding EN signal on $flatten\uart0.$procdff$819 ($dff) from module UARTTest (D = $flatten\uart0.$0\tx_out[0:0], Q = \uart0.tx_out).
Adding EN signal on $flatten\uart0.$procdff$818 ($dff) from module UARTTest (D = $flatten\uart0.$0\rx_data[7:0], Q = \uart0.rx_data).
Adding EN signal on $flatten\uart0.$procdff$817 ($dff) from module UARTTest (D = $flatten\uart0.$0\rx_bits_remaining[3:0], Q = \uart0.rx_bits_remaining).
Adding EN signal on $flatten\uart0.$procdff$816 ($dff) from module UARTTest (D = $flatten\uart0.$0\recv_state[2:0], Q = \uart0.recv_state).
Adding EN signal on $flatten\uart0.$procdff$813 ($dff) from module UARTTest (D = $flatten\uart0.$0\rx_sample_countdown[3:0], Q = \uart0.rx_sample_countdown).
Adding EN signal on $flatten\uart0.$procdff$812 ($dff) from module UARTTest (D = $flatten\uart0.$0\rx_samples[3:0], Q = \uart0.rx_samples).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.
<suppressed ~7 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$412: { $flatten\uart0.$procmux$379_CMP $flatten\uart0.$procmux$296_CMP }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$417: { $flatten\uart0.$procmux$379_CMP $flatten\uart0.$procmux$296_CMP }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$427: { $flatten\uart0.$procmux$379_CMP $flatten\uart0.$procmux$296_CMP }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$755: $flatten\uart0.$procmux$456_CMP
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$764: { $flatten\uart0.$procmux$601_CMP $flatten\uart0.$procmux$456_CMP }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$773: { $flatten\uart0.$procmux$601_CMP $flatten\uart0.$procmux$547_CMP $flatten\uart0.$procmux$456_CMP }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$782: { $flatten\uart0.$procmux$601_CMP $flatten\uart0.$procmux$547_CMP $flatten\uart0.$procmux$456_CMP }
  Optimizing cells in module \UARTTest.
Performed a total of 7 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
<suppressed ~66 debug messages>
Removed a total of 22 cells.

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 0 unused cells and 22 unused wires.
<suppressed ~1 debug messages>

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
Performed a total of 0 changes.

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.13.23. Finished OPT passes. (There is nothing left to do.)

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell UARTTest.$auto$opt_dff.cc:218:make_patterns_logic$908 ($ne).
Removed top 1 bits (of 2) from port B of cell UARTTest.$auto$opt_dff.cc:218:make_patterns_logic$904 ($ne).
Removed top 1 bits (of 2) from port B of cell UARTTest.$auto$opt_dff.cc:218:make_patterns_logic$891 ($ne).
Removed top 1 bits (of 2) from port B of cell UARTTest.$auto$opt_dff.cc:218:make_patterns_logic$882 ($ne).
Removed top 1 bits (of 2) from port B of cell UARTTest.$auto$opt_dff.cc:218:make_patterns_logic$848 ($ne).
Removed cell UARTTest.$flatten\uart0.$procmux$755 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$721 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$709 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$698 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$676 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$665 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$638 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$610 ($mux).
Removed top 2 bits (of 3) from port B of cell UARTTest.$flatten\uart0.$procmux$601_CMP0 ($eq).
Removed cell UARTTest.$flatten\uart0.$procmux$596 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$584 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$564 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$554 ($mux).
Removed top 1 bits (of 3) from port B of cell UARTTest.$flatten\uart0.$procmux$547_CMP0 ($eq).
Removed cell UARTTest.$flatten\uart0.$procmux$542 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$531 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$522 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$513 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$504 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$486 ($mux).
Removed top 5 bits (of 15) from mux cell UARTTest.$flatten\uart0.$procmux$463 ($mux).
Removed top 1 bits (of 3) from port B of cell UARTTest.$flatten\uart0.$procmux$456_CMP0 ($eq).
Removed cell UARTTest.$flatten\uart0.$procmux$441 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$408 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$392 ($mux).
Removed top 1 bits (of 2) from port B of cell UARTTest.$auto$opt_dff.cc:218:make_patterns_logic$844 ($ne).
Removed cell UARTTest.$flatten\uart0.$procmux$384 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$376 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$361 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$354 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$347 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$340 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$331 ($mux).
Removed cell UARTTest.$flatten\uart0.$procmux$311 ($mux).
Removed top 1 bits (of 11) from mux cell UARTTest.$flatten\uart0.$procmux$301 ($mux).
Removed top 1 bits (of 2) from port B of cell UARTTest.$flatten\uart0.$procmux$296_CMP0 ($eq).
Removed top 1 bits (of 2) from mux cell UARTTest.$flatten\uart0.$ternary$uart.v:301$35 ($mux).
Removed top 2 bits (of 3) from mux cell UARTTest.$flatten\uart0.$ternary$uart.v:226$28 ($mux).
Removed top 30 bits (of 32) from port B of cell UARTTest.$flatten\uart0.$gt$uart.v:201$24 ($gt).
Removed top 2 bits (of 3) from mux cell UARTTest.$flatten\uart0.$ternary$uart.v:193$22 ($mux).
Removed top 1 bits (of 8) from wire UARTTest.$flatten\uart0.$3\tx_data[7:0].
Removed top 1 bits (of 8) from wire UARTTest.$flatten\uart0.$4\tx_data[7:0].
Removed top 1 bits (of 11) from wire UARTTest.$flatten\uart0.$5\tx_clk[10:0].
Removed top 2 bits (of 3) from wire UARTTest.$flatten\uart0.$6\recv_state[2:0].
Removed top 5 bits (of 15) from wire UARTTest.$flatten\uart0.$8\rx_clk[14:0].
Removed top 2 bits (of 3) from wire UARTTest.$flatten\uart0.$9\recv_state[2:0].
Removed top 2 bits (of 3) from wire UARTTest.$flatten\uart0.$ternary$uart.v:193$22_Y.
Removed top 2 bits (of 3) from wire UARTTest.$flatten\uart0.$ternary$uart.v:226$28_Y.
Removed top 1 bits (of 2) from wire UARTTest.$flatten\uart0.$ternary$uart.v:301$35_Y.

3.15. Executing PEEPOPT pass (run peephole optimizers).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 0 unused cells and 38 unused wires.
<suppressed ~1 debug messages>

3.17. Executing SHARE pass (SAT-based resource sharing).

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.18.2. Continuing TECHMAP pass.
Using template $paramod$5c6790619fdd520f2101529d9884f145abb8b880\_90_lut_cmp_ for cells of type $gt.
No more expansions possible.
<suppressed ~36 debug messages>

3.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.21.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/dsp_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__MUL18X18'.
Successfully finished Verilog frontend.

3.21.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

3.22. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module UARTTest:
  creating $macc model for $flatten\uart0.$add$uart.v:189$19 ($add).
  creating $macc model for $flatten\uart0.$sub$uart.v:145$12 ($sub).
  creating $macc model for $flatten\uart0.$sub$uart.v:149$14 ($sub).
  creating $macc model for $flatten\uart0.$sub$uart.v:192$20 ($sub).
  creating $macc model for $flatten\uart0.$sub$uart.v:210$25 ($sub).
  creating $macc model for $flatten\uart0.$sub$uart.v:283$33 ($sub).
  creating $alu model for $macc $flatten\uart0.$sub$uart.v:283$33.
  creating $alu model for $macc $flatten\uart0.$sub$uart.v:210$25.
  creating $alu model for $macc $flatten\uart0.$sub$uart.v:192$20.
  creating $alu model for $macc $flatten\uart0.$sub$uart.v:149$14.
  creating $alu model for $macc $flatten\uart0.$sub$uart.v:145$12.
  creating $alu model for $macc $flatten\uart0.$add$uart.v:189$19.
  creating $alu cell for $flatten\uart0.$add$uart.v:189$19: $auto$alumacc.cc:485:replace_alu$951
  creating $alu cell for $flatten\uart0.$sub$uart.v:145$12: $auto$alumacc.cc:485:replace_alu$954
  creating $alu cell for $flatten\uart0.$sub$uart.v:149$14: $auto$alumacc.cc:485:replace_alu$957
  creating $alu cell for $flatten\uart0.$sub$uart.v:192$20: $auto$alumacc.cc:485:replace_alu$960
  creating $alu cell for $flatten\uart0.$sub$uart.v:210$25: $auto$alumacc.cc:485:replace_alu$963
  creating $alu cell for $flatten\uart0.$sub$uart.v:283$33: $auto$alumacc.cc:485:replace_alu$966
  created 6 $alu and 0 $macc cells.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

3.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$773: { $flatten\uart0.$procmux$547_CMP $auto$opt_reduce.cc:134:opt_mux$970 }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$782: { $flatten\uart0.$procmux$547_CMP $auto$opt_reduce.cc:134:opt_mux$972 }
  Optimizing cells in module \UARTTest.
Performed a total of 2 changes.

3.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.23.6. Executing OPT_DFF pass (perform DFF optimizations).

3.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.23.9. Rerunning OPT passes. (Maybe there is more to do..)

3.23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

3.23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
Performed a total of 0 changes.

3.23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.23.13. Executing OPT_DFF pass (perform DFF optimizations).

3.23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.23.16. Finished OPT passes. (There is nothing left to do.)

3.24. Executing MEMORY pass.

3.24.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.24.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.24.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.24.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.24.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.24.6. Executing MEMORY_COLLECT pass (generating $mem cells).

3.25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.26. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

3.27. Executing TECHMAP pass (map to technology primitives).

3.27.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ECP5_DP16KD'.
Generating RTLIL representation for module `\$__ECP5_PDPW16KD'.
Successfully finished Verilog frontend.

3.27.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.28. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

3.29. Executing TECHMAP pass (map to technology primitives).

3.29.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/lutrams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/lutrams_map.v' to AST representation.
Generating RTLIL representation for module `\$__TRELLIS_DPR16X4'.
Successfully finished Verilog frontend.

3.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

3.30. Executing OPT pass (performing simple optimizations).

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.
<suppressed ~21 debug messages>

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.30.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$939 ($dffe) from module UARTTest (D = $flatten\uart0.$4\rx_samples[3:0], Q = \uart0.rx_samples, rval = 4'0000).
Adding SRST signal on $auto$opt_dff.cc:764:run$924 ($dffe) from module UARTTest (D = $flatten\uart0.$4\rx_sample_countdown[3:0], Q = \uart0.rx_sample_countdown, rval = 4'0101).
Adding SRST signal on $auto$opt_dff.cc:764:run$898 ($dffe) from module UARTTest (D = $flatten\uart0.$4\rx_bits_remaining[3:0], Q = \uart0.rx_bits_remaining, rval = 4'1000).
Adding SRST signal on $auto$opt_dff.cc:764:run$880 ($dffe) from module UARTTest (D = $flatten\uart0.$3\tx_out[0:0], Q = \uart0.tx_out, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$864 ($dffe) from module UARTTest (D = $flatten\uart0.$3\tx_bits_remaining[3:0], Q = \uart0.tx_bits_remaining, rval = 4'1000).
Adding SRST signal on $auto$opt_dff.cc:764:run$853 ($dffe) from module UARTTest (D = \uart0.tx_byte [7], Q = \uart0.tx_data [7], rval = 1'0).

3.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 5 unused cells and 8 unused wires.
<suppressed ~6 debug messages>

3.30.5. Rerunning OPT passes. (Removed registers in this run.)

3.30.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.
<suppressed ~1 debug messages>

3.30.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.30.8. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:702:run$979 ($sdffce) from module UARTTest.

3.30.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.30.10. Rerunning OPT passes. (Removed registers in this run.)

3.30.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.30.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 6 on $auto$opt_dff.cc:764:run$853 ($dffe) from module UARTTest.

3.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.30.15. Rerunning OPT passes. (Removed registers in this run.)

3.30.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.30.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.30.18. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$853 ($dffe) from module UARTTest.

3.30.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.30.20. Rerunning OPT passes. (Removed registers in this run.)

3.30.21. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.30.22. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.30.23. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 4 on $auto$opt_dff.cc:764:run$853 ($dffe) from module UARTTest.

3.30.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.30.25. Rerunning OPT passes. (Removed registers in this run.)

3.30.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.30.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.30.28. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 3 on $auto$opt_dff.cc:764:run$853 ($dffe) from module UARTTest.

3.30.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.30.30. Rerunning OPT passes. (Removed registers in this run.)

3.30.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.30.32. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.30.33. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$853 ($dffe) from module UARTTest.

3.30.34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.30.35. Rerunning OPT passes. (Removed registers in this run.)

3.30.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.30.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.30.38. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$853 ($dffe) from module UARTTest.

3.30.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.30.40. Rerunning OPT passes. (Removed registers in this run.)

3.30.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.30.42. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.30.43. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$853 ($dffe) from module UARTTest.

3.30.44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.30.45. Rerunning OPT passes. (Removed registers in this run.)

3.30.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.30.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.30.48. Executing OPT_DFF pass (perform DFF optimizations).

3.30.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.30.50. Finished fast OPT passes.

3.31. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.32. Executing OPT pass (performing simple optimizations).

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
    Consolidated identical input bits for $mux cell $flatten\uart0.$procmux$301:
      Old ports: A=10'1000100000, B=10'0011100010, Y=$auto$wreduce.cc:454:run$942 [9:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:454:run$942 [9] $auto$wreduce.cc:454:run$942 [1] }
      New connections: { $auto$wreduce.cc:454:run$942 [8:2] $auto$wreduce.cc:454:run$942 [0] } = { 1'0 $auto$wreduce.cc:454:run$942 [1] $auto$wreduce.cc:454:run$942 [1] 5'10000 }
    New ctrl vector for $pmux cell $flatten\uart0.$procmux$432: $flatten\uart0.$procmux$296_CMP
    Consolidated identical input bits for $mux cell $flatten\uart0.$procmux$451:
      Old ports: A=3'100, B=3'010, Y=$flatten\uart0.$7\recv_state[2:0]
      New ports: A=2'10, B=2'01, Y=$flatten\uart0.$7\recv_state[2:0] [2:1]
      New connections: $flatten\uart0.$7\recv_state[2:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\uart0.$procmux$463:
      Old ports: A=10'1001110001, B=10'0111010100, Y=$auto$wreduce.cc:454:run$944 [9:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:454:run$944 [2] $auto$wreduce.cc:454:run$944 [0] }
      New connections: { $auto$wreduce.cc:454:run$944 [9:3] $auto$wreduce.cc:454:run$944 [1] } = { $auto$wreduce.cc:454:run$944 [0] $auto$wreduce.cc:454:run$944 [2] $auto$wreduce.cc:454:run$944 [2] 1'1 $auto$wreduce.cc:454:run$944 [0] 3'100 }
    Consolidated identical input bits for $mux cell $flatten\uart0.$procmux$475:
      Old ports: A={ 1'0 \uart0.rx_data [7:1] }, B={ 1'1 \uart0.rx_data [7:1] }, Y=$flatten\uart0.$0\rx_data[7:0]
      New ports: A=1'0, B=1'1, Y=$flatten\uart0.$0\rx_data[7:0] [7]
      New connections: $flatten\uart0.$0\rx_data[7:0] [6:0] = \uart0.rx_data [7:1]
    Consolidated identical input bits for $mux cell $flatten\uart0.$procmux$624:
      Old ports: A=3'010, B=3'110, Y=$flatten\uart0.$4\recv_state[2:0]
      New ports: A=1'0, B=1'1, Y=$flatten\uart0.$4\recv_state[2:0] [2]
      New connections: $flatten\uart0.$4\recv_state[2:0] [1:0] = 2'10
    Consolidated identical input bits for $mux cell $flatten\uart0.$ternary$uart.v:247$30:
      Old ports: A=3'000, B=3'101, Y=$flatten\uart0.$ternary$uart.v:247$30_Y
      New ports: A=1'0, B=1'1, Y=$flatten\uart0.$ternary$uart.v:247$30_Y [0]
      New connections: $flatten\uart0.$ternary$uart.v:247$30_Y [2:1] = { $flatten\uart0.$ternary$uart.v:247$30_Y [0] 1'0 }
  Optimizing cells in module \UARTTest.
Performed a total of 7 changes.

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.32.9. Rerunning OPT passes. (Maybe there is more to do..)

3.32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \UARTTest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \UARTTest.
Performed a total of 0 changes.

3.32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
Removed a total of 0 cells.

3.32.13. Executing OPT_DFF pass (perform DFF optimizations).

3.32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.32.16. Finished OPT passes. (There is nothing left to do.)

3.33. Executing TECHMAP pass (map to technology primitives).

3.33.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.33.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ecp5_alu'.
Successfully finished Verilog frontend.

3.33.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_pmux\WIDTH=15\S_WIDTH=5 for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=7 for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=1\Y_WIDTH=15 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=1\Y_WIDTH=11 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~585 debug messages>

3.34. Executing OPT pass (performing simple optimizations).

3.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.
<suppressed ~422 debug messages>

3.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\UARTTest'.
<suppressed ~216 debug messages>
Removed a total of 72 cells.

3.34.3. Executing OPT_DFF pass (perform DFF optimizations).

3.34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 57 unused cells and 479 unused wires.
<suppressed ~58 debug messages>

3.34.5. Finished fast OPT passes.

3.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..

3.36. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

3.37. Executing TECHMAP pass (map to technology primitives).

3.37.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

3.37.2. Continuing TECHMAP pass.
Using template $paramod\$_DFF_P_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_P_.
Using template \$_SDFFE_PP1P_ for cells of type $_SDFFE_PP1P_.
Using template \$_SDFFE_PP0P_ for cells of type $_SDFFE_PP0P_.
Using template $paramod\$_DFFE_PN_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFFE_PN_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'0 for cells of type $_DFFE_PP_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'1 for cells of type $_DFFE_PP_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~177 debug messages>

3.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module UARTTest.

3.39. Executing SIMPLEMAP pass (map simple cells to gate primitives).

3.40. Executing ECP5_GSR pass (implement FF init values).
Handling GSR in UARTTest.

3.41. Executing ATTRMVCP pass (move or copy attributes).

3.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \UARTTest..
Removed 0 unused cells and 275 unused wires.
<suppressed ~1 debug messages>

3.43. Executing TECHMAP pass (map to technology primitives).

3.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

3.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.44. Executing ABC pass (technology mapping using ABC).

3.44.1. Extracting gate netlist of module `\UARTTest' to `<abc-temp-dir>/input.blif'..
Extracted 470 gates and 548 wires to a netlist network with 76 inputs and 75 outputs.

3.44.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + dress 
ABC: Total number of equiv classes                =      87.
ABC: Participating nodes from both networks       =     227.
ABC: Participating nodes from the first network   =      90. (  64.29 % of nodes)
ABC: Participating nodes from the second network  =     137. (  97.86 % of nodes)
ABC: Node pairs (any polarity)                    =      90. (  64.29 % of names can be moved)
ABC: Node pairs (same polarity)                   =      82. (  58.57 % of names can be moved)
ABC: Total runtime =     0.02 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

3.44.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      135
ABC RESULTS:        internal signals:      397
ABC RESULTS:           input signals:       76
ABC RESULTS:          output signals:       75
Removing temp directory.
Removed 0 unused cells and 293 unused wires.

3.45. Executing TECHMAP pass (map to technology primitives).

3.45.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.45.2. Continuing TECHMAP pass.
Using template $paramod$746424d0983081829316163db34337ccf8ceb1ee\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10000000100000001000000011111111 for cells of type $lut.
Using template $paramod$1929d44748517239e36a599c0facfb62ddb99607\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod$b5cd238a527d851ba52055b76f8b8313ff4d0a1d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=234881024 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=268435456 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=16777216 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod$89a7c44637a153ae876a5df3b846d5543893af1c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111100000000000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10001000111111111111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111110000000000000001 for cells of type $lut.
Using template $paramod$ca3030f640367f4dbbc99eaf2cc631b771955f8e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod$d15f39da4cdda7162c5b1d8de7c7e77e72dbe4aa\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111110100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=33023 for cells of type $lut.
Using template $paramod$2ddb5b5cad1eda4b448691edd161080bb92bfe50\$lut for cells of type $lut.
Using template $paramod$fcd45dac87ecaf8167f012f6f6d6fa7b369dedb8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod$d611654eaf2cfdde5476b49ff7dde7a3d8cbca2c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111111000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod$43d36707918893cdc94f3173e86faa45633b8ce7\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod$05b7e8229d9a7a31e653ac7a3cef172aa16e73f1\$lut for cells of type $lut.
Using template $paramod$1afbcf3fbf9c0f1037886bc3bfcf080c18113a8d\$lut for cells of type $lut.
Using template $paramod$57619346c001bba14f685682aaa48a843cd5a7a5\$lut for cells of type $lut.
Using template $paramod$629bea346f0daddb39cb1ebf17c36b3d1144d5d1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=268372104 for cells of type $lut.
Using template $paramod$34761ec4d1c147b684bec192cbb6fb046dbf7610\$lut for cells of type $lut.
Using template $paramod$56f3e246421b6b29fd066d86d01fc72a1f44c94f\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~1020 debug messages>

3.46. Executing OPT_LUT_INS pass (discard unused LUT inputs).
Optimizing LUTs in UARTTest.
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2641.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2641.lut2 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2641.lut3 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2641.lut4 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2641.lut5 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2641.lut6 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2650.lut2 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2653.lut1 (4 -> 2)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2677.lut2 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2677.lut4 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2677.lut5 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2677.lut6 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2677.lut7 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2659.lut2 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2659.lut3 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2658.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2658.lut2 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2669.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2669.lut2 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2669.lut4 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2669.lut5 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2669.lut6 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2669.lut7 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2672.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2679.lut2 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2679.lut4 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2679.lut5 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2679.lut6 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2679.lut7 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2684.lut2 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2684.lut3 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2699.lut2 (4 -> 1)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2699.lut3 (4 -> 1)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2699.lut4 (4 -> 1)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2699.lut5 (4 -> 1)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2699.lut6 (4 -> 1)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2709.lut2 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2709.lut3 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2709.lut4 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2709.lut5 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2709.lut6 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2703.lut7 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2700.lut7 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2701.lut7 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2721.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2721.lut2 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2721.lut3 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2676.lut2 (4 -> 1)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2676.lut3 (4 -> 3)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2702.lut2 (4 -> 3)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2702.lut3 (4 -> 3)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2618.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2618.lut3 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2628.lut2 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2634.lut1 (4 -> 3)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2622.lut2 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2622.lut3 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2622.lut4 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2622.lut5 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2622.lut6 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2622.lut7 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2617.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2618.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2622.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2623.lut1 (4 -> 3)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2628.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2633.lut1 (4 -> 3)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2628.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2640.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2641.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2643.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2642.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2650.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2658.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2659.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2650.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2677.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2669.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2676.lut1 (4 -> 1)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2682.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2683.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2679.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2676.lut0 (4 -> 1)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2677.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2679.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2682.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2683.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2684.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2708.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2702.lut1 (4 -> 3)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2699.lut0 (4 -> 1)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2724.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2709.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2711.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2699.lut1 (4 -> 1)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2709.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2723.lut0 (4 -> 2)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2723.lut1 (4 -> 3)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2718.lut1 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2745.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2746.lut0 (4 -> 0)
  Optimizing lut $abc$2616$auto$blifparse.cc:498:parse_blif$2747.lut0 (4 -> 0)
Removed 0 unused cells and 300 unused wires.

3.47. Executing AUTONAME pass.
Renamed 4418 objects in module UARTTest (67 iterations).
<suppressed ~770 debug messages>

3.48. Executing HIERARCHY pass (managing design hierarchy).

3.48.1. Analyzing design hierarchy..
Top module:  \UARTTest

3.48.2. Analyzing design hierarchy..
Top module:  \UARTTest
Removed 0 unused modules.

3.49. Printing statistics.

=== UARTTest ===

   Number of wires:                354
   Number of wire bits:            713
   Number of public wires:         354
   Number of public wire bits:     713
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                446
     CCU2C                          14
     L6MUX21                        41
     LUT4                          255
     PFUMX                          79
     TRELLIS_FF                     57

3.50. Executing CHECK pass (checking for obvious problems).
checking module UARTTest..
found and reported 0 problems.

3.51. Executing JSON backend.

Warnings: 9 unique messages, 9 total
End of script. Logfile hash: 6237a0fbe8, CPU: user 2.81s system 0.30s, MEM: 248.23 MB peak
Yosys 0.9+3578 (git sha1 ed579038, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 35% 15x read_verilog (1 sec), 12% 8x techmap (0 sec), ...
nextpnr-ecp5 --json UARTTest.json --textcfg UARTTest_out.config --um5g-85k --package CABGA381 --lpf ecp5.lpf


Info: Logic utilisation before packing:
Info:     Total LUT4s:       283/83640     0%
Info:         logic LUTs:    255/83640     0%
Info:         carry LUTs:     28/83640     0%
Info:           RAM LUTs:      0/41820     0%
Info:          RAMW LUTs:      0/20910     0%

Info:      Total DFFs:       114/83640     0%

Info: Packing IOs..
Info: pin 'RS232_Rx$tr_io' constrained to Bel 'X0/Y92/PIOB'.
Info: pin 'RS232_Tx$tr_io' constrained to Bel 'X0/Y92/PIOC'.
Info: pin 'clk$tr_io' constrained to Bel 'X63/Y0/PIOA'.
Info: pin 'led$tr_io' constrained to Bel 'X76/Y0/PIOB'.
Info: pin 'rxout$tr_io' constrained to Bel 'X126/Y92/PIOC'.
Info: Packing constants..
Info: Packing carries...
Info: Finding LUTFF pairs...
Info: Packing LUT5-7s...
Info: Finding LUT-LUT pairs...
Info: Packing paired LUTs into a SLICE...
Info: Packing unpaired LUTs into a SLICE...
Info: Packing unpaired FFs into a SLICE...
Info: Generating derived timing constraints...
Info: Promoting globals...
Info:     promoting clock net clk$TRELLIS_IO_IN to global network
Info: Checksum: 0x21d34a3b

Info: Annotating ports with timing budgets for target frequency 12.00 MHz
Info: Checksum: 0xd0fc143a

Info: Device utilisation:
Info: 	       TRELLIS_SLICE:   162/41820     0%
Info: 	          TRELLIS_IO:     5/  365     1%
Info: 	                DCCA:     1/   56     1%
Info: 	              DP16KD:     0/  208     0%
Info: 	          MULT18X18D:     0/  156     0%
Info: 	              ALU54B:     0/   78     0%
Info: 	             EHXPLLL:     0/    4     0%
Info: 	             EXTREFB:     0/    2     0%
Info: 	                DCUA:     0/    2     0%
Info: 	           PCSCLKDIV:     0/    2     0%
Info: 	             IOLOGIC:     0/  224     0%
Info: 	            SIOLOGIC:     0/  141     0%
Info: 	                 GSR:     0/    1     0%
Info: 	               JTAGG:     0/    1     0%
Info: 	                OSCG:     0/    1     0%
Info: 	               SEDGA:     0/    1     0%
Info: 	                 DTR:     0/    1     0%
Info: 	             USRMCLK:     0/    1     0%
Info: 	             CLKDIVF:     0/    4     0%
Info: 	           ECLKSYNCB:     0/   10     0%
Info: 	             DLLDELD:     0/    8     0%
Info: 	              DDRDLL:     0/    4     0%
Info: 	             DQSBUFM:     0/   14     0%
Info: 	     TRELLIS_ECLKBUF:     0/    8     0%
Info: 	        ECLKBRIDGECS:     0/    2     0%

Info: Placed 5 cells based on constraints.
Info: Creating initial analytic placement for 104 cells, random placement wirelen = 19350.
Info:     at initial placer iter 0, wirelen = 629
Info:     at initial placer iter 1, wirelen = 353
Info:     at initial placer iter 2, wirelen = 353
Info:     at initial placer iter 3, wirelen = 355
Info: Running main analytical placer.
Info:     at iteration #1, type TRELLIS_SLICE: wirelen solved = 353, spread = 923, legal = 958; time = 0.01s
Info:     at iteration #2, type TRELLIS_SLICE: wirelen solved = 371, spread = 898, legal = 952; time = 0.02s
Info:     at iteration #3, type TRELLIS_SLICE: wirelen solved = 371, spread = 844, legal = 926; time = 0.01s
Info:     at iteration #4, type TRELLIS_SLICE: wirelen solved = 409, spread = 904, legal = 948; time = 0.01s
Info:     at iteration #5, type TRELLIS_SLICE: wirelen solved = 403, spread = 896, legal = 974; time = 0.01s
Info:     at iteration #6, type TRELLIS_SLICE: wirelen solved = 400, spread = 829, legal = 863; time = 0.01s
Info:     at iteration #7, type TRELLIS_SLICE: wirelen solved = 403, spread = 814, legal = 860; time = 0.01s
Info:     at iteration #8, type TRELLIS_SLICE: wirelen solved = 406, spread = 843, legal = 889; time = 0.01s
Info:     at iteration #9, type TRELLIS_SLICE: wirelen solved = 410, spread = 848, legal = 905; time = 0.01s
Info:     at iteration #10, type TRELLIS_SLICE: wirelen solved = 423, spread = 848, legal = 905; time = 0.01s
Info:     at iteration #11, type TRELLIS_SLICE: wirelen solved = 438, spread = 845, legal = 924; time = 0.01s
Info:     at iteration #12, type TRELLIS_SLICE: wirelen solved = 448, spread = 827, legal = 901; time = 0.01s
Info: HeAP Placer Time: 0.18s
Info:   of which solving equations: 0.10s
Info:   of which spreading cells: 0.02s
Info:   of which strict legalisation: 0.00s

Info: Running simulated annealing placer for refinement.
Info:   at iteration #1: temp = 0.000000, timing cost = 104, wirelen = 860
Info:   at iteration #4: temp = 0.000000, timing cost = 106, wirelen = 789 
Info: SA placement time 0.03s

Info: Max frequency for clock '$glbnet$clk$TRELLIS_IO_IN': 191.09 MHz (PASS at 12.00 MHz)

Info: Max delay <async>                           -> posedge $glbnet$clk$TRELLIS_IO_IN: 8.52 ns
Info: Max delay posedge $glbnet$clk$TRELLIS_IO_IN -> <async>                          : 5.20 ns

Info: Slack histogram:
Info:  legend: * represents 1 endpoint(s)
Info:          + represents [1,1) endpoint(s)
Info: [ 74808,  75180) |* 
Info: [ 75180,  75552) |* 
Info: [ 75552,  75924) |******* 
Info: [ 75924,  76296) |******************* 
Info: [ 76296,  76668) |************ 
Info: [ 76668,  77040) |******** 
Info: [ 77040,  77412) | 
Info: [ 77412,  77784) | 
Info: [ 77784,  78156) |*** 
Info: [ 78156,  78528) |************************* 
Info: [ 78528,  78900) |********************* 
Info: [ 78900,  79272) |*** 
Info: [ 79272,  79644) |********** 
Info: [ 79644,  80016) |****** 
Info: [ 80016,  80388) |**** 
Info: [ 80388,  80760) |****** 
Info: [ 80760,  81132) |***** 
Info: [ 81132,  81504) |**** 
Info: [ 81504,  81876) |** 
Info: [ 81876,  82248) |******************* 
Info: Checksum: 0x9c56d348
Info: Routing globals...
Info:     routing clock net $glbnet$clk$TRELLIS_IO_IN using global 0

Info: Routing..
Info: Setting up routing queue.
Info: Routing 905 arcs.
Info:            |   (re-)routed arcs  |   delta    | remaining|       time spent     |
Info:    IterCnt |  w/ripup   wo/ripup |  w/r  wo/r |      arcs| batch(sec) total(sec)|
Info:        917 |        5        912 |    5   912 |         0|       1.44       1.44|
Info: Routing complete.
Info: Router1 time 1.44s
Info: Checksum: 0x6ab28b7f

Info: Critical path report for clock '$glbnet$clk$TRELLIS_IO_IN' (posedge -> posedge):
Info: curr total
Info:  0.3  0.3  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_7_SLICE.Q0
Info:  1.2  1.5    Net uart0.rx_clk[1] budget 13.560000 ns (76,74) -> (74,76)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_COUT_CCU2C_COUT_4$CCU2_SLICE.A1
Info:                Defined in:
Info:                  UARTTest.v:27.10-39.7
Info:                  uart.v:98.39-98.45
Info:  0.3  1.8  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_COUT_CCU2C_COUT_4$CCU2_SLICE.FCO
Info:  0.0  1.8    Net uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_1_COUT[0] budget 0.000000 ns (74,76) -> (74,76)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_COUT_CCU2C_COUT_1$CCU2_SLICE.FCI
Info:                Defined in:
Info:                  UARTTest.v:27.10-39.7
Info:                  uart.v:145.22-145.35
Info:                  /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info:  0.0  1.8  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_COUT_CCU2C_COUT_1$CCU2_SLICE.FCO
Info:  0.0  1.8    Net uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_1_COUT[2] budget 0.000000 ns (74,76) -> (74,76)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_5_D_LUT4_Z_B_CCU2C_S1$CCU2_SLICE.FCI
Info:                Defined in:
Info:                  UARTTest.v:27.10-39.7
Info:                  uart.v:145.22-145.35
Info:                  /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info:  0.0  1.9  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_5_D_LUT4_Z_B_CCU2C_S1$CCU2_SLICE.FCO
Info:  0.0  1.9    Net uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_1_COUT[4] budget 0.000000 ns (74,76) -> (75,76)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_COUT_CCU2C_COUT$CCU2_SLICE.FCI
Info:                Defined in:
Info:                  UARTTest.v:27.10-39.7
Info:                  uart.v:145.22-145.35
Info:                  /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info:  0.0  1.9  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_COUT_CCU2C_COUT$CCU2_SLICE.FCO
Info:  0.0  1.9    Net uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_1_COUT[6] budget 0.000000 ns (75,76) -> (75,76)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0$CCU2_SLICE.FCI
Info:                Defined in:
Info:                  UARTTest.v:27.10-39.7
Info:                  uart.v:145.22-145.35
Info:                  /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info:  0.0  2.0  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0$CCU2_SLICE.FCO
Info:  0.0  2.0    Net uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_1_COUT[8] budget 0.000000 ns (75,76) -> (75,76)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_COUT_CCU2C_COUT_3$CCU2_SLICE.FCI
Info:                Defined in:
Info:                  UARTTest.v:27.10-39.7
Info:                  uart.v:145.22-145.35
Info:                  /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info:  0.0  2.0  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_COUT_CCU2C_COUT_3$CCU2_SLICE.FCO
Info:  0.0  2.0    Net uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_1_COUT[10] budget 0.000000 ns (75,76) -> (75,76)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_COUT_CCU2C_COUT_2$CCU2_SLICE.FCI
Info:                Defined in:
Info:                  UARTTest.v:27.10-39.7
Info:                  uart.v:145.22-145.35
Info:                  /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info:  0.3  2.3  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_COUT_CCU2C_COUT_2$CCU2_SLICE.F0
Info:  0.7  2.9    Net uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_D_CCU2C_S0_COUT_CCU2C_COUT_S0[4] budget 13.560000 ns (75,76) -> (75,75)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_2_SLICE.D1
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.1  3.1  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_2_SLICE.F1
Info:  0.6  3.7    Net uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z_LUT4_Z_7_C[3] budget 13.560000 ns (75,75) -> (76,75)
Info:                Sink RS232_Rx_LUT4_D_Z_L6MUX21_Z_D1_PFUMX_Z_SLICE.B1
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.2  3.9  Source RS232_Rx_LUT4_D_Z_L6MUX21_Z_D1_PFUMX_Z_SLICE.OFX0
Info:  0.0  3.9    Net RS232_Rx_LUT4_D_Z_L6MUX21_Z_D1 budget 0.000000 ns (76,75) -> (76,75)
Info:                Sink RS232_Rx_LUT4_D_Z_L6MUX21_Z_D1_PFUMX_Z_SLICE.FXB
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:142.38-142.40
Info:  0.1  4.0  Source RS232_Rx_LUT4_D_Z_L6MUX21_Z_D1_PFUMX_Z_SLICE.OFX1
Info:  1.2  5.2    Net RS232_Rx_LUT4_D_Z[4] budget 16.299000 ns (76,75) -> (78,76)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_SLICE.D0
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.2  5.5  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_SLICE.OFX0
Info:  0.4  5.9    Net uart0.recv_state_TRELLIS_FF_Q_CE budget 16.299000 ns (78,76) -> (77,76)
Info:                Sink led_set_TRELLIS_FF_Q_CE_LUT4_Z_SLICE.CE
Info:  0.0  5.9  Setup led_set_TRELLIS_FF_Q_CE_LUT4_Z_SLICE.CE
Info: 1.8 ns logic, 4.1 ns routing

Info: Critical path report for cross-domain path '<async>' -> 'posedge $glbnet$clk$TRELLIS_IO_IN':
Info: curr total
Info:  0.0  0.0  Source RS232_Rx$tr_io.O
Info:  4.1  4.1    Net RS232_Rx$TRELLIS_IO_IN budget 0.000000 ns (0,92) -> (78,75)
Info:                Sink RS232_Rx_LUT4_C_SLICE.C0
Info:                Defined in:
Info:                  UARTTest.v:27.10-39.7
Info:                  uart.v:53.11-53.13
Info:  0.1  4.2  Source RS232_Rx_LUT4_C_SLICE.F0
Info:  1.0  5.2    Net RS232_Rx_LUT4_C_Z[0] budget 0.000000 ns (78,75) -> (73,76)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_D_L6MUX21_Z_D1_L6MUX21_Z_D1_PFUMX_Z_SLICE.A1
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.2  5.4  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_D_L6MUX21_Z_D1_L6MUX21_Z_D1_PFUMX_Z_SLICE.OFX0
Info:  0.0  5.4    Net uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_D_L6MUX21_Z_D1_L6MUX21_Z_D1 budget 0.000000 ns (73,76) -> (73,76)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_D_L6MUX21_Z_D1_L6MUX21_Z_D1_PFUMX_Z_SLICE.FXB
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:158.62-158.64
Info:  0.1  5.6  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_D_L6MUX21_Z_D1_L6MUX21_Z_D1_PFUMX_Z_SLICE.OFX1
Info:  0.0  5.6    Net uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_D_L6MUX21_Z_D1 budget 0.000000 ns (73,76) -> (73,76)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_D_L6MUX21_Z_D1_L6MUX21_Z_D0_PFUMX_Z_SLICE.FXB
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:158.70-158.72
Info:  0.1  5.7  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_D_L6MUX21_Z_D1_L6MUX21_Z_D0_PFUMX_Z_SLICE.OFX1
Info:  0.5  6.2    Net uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_D[3] budget 16.215000 ns (73,76) -> (73,77)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_SLICE.D0
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.1  6.3  Source uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_SLICE.F0
Info:  0.1  6.4    Net uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_Z[0] budget 16.215000 ns (73,77) -> (73,77)
Info:                Sink uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_SLICE.DI0
Info:                Defined in:
Info:                  UARTTest.v:27.10-39.7
Info:                  uart.v:155.9-258.16
Info:                  uart.v:0.0-0.0
Info:                  /usr/local/bin/../share/yosys/techmap.v:575.21-575.22
Info:  0.0  6.4  Setup uart0.recv_state_TRELLIS_FF_Q_CE_PFUMX_Z_C0_LUT4_B_1_SLICE.DI0
Info: 0.8 ns logic, 5.6 ns routing

Info: Critical path report for cross-domain path 'posedge $glbnet$clk$TRELLIS_IO_IN' -> '<async>':
Info: curr total
Info:  0.3  0.3  Source uart0.rx_data_TRELLIS_FF_Q_DI_LUT4_Z_SLICE.Q1
Info:  0.4  0.7    Net rx_byte[7] budget 41.442001 ns (78,74) -> (78,74)
Info:                Sink rxout_LUT4_Z_SLICE.C1
Info:                Defined in:
Info:                  UARTTest.v:27.10-39.7
Info:                  uart.v:103.15-103.22
Info:  0.1  0.9  Source rxout_LUT4_Z_SLICE.F1
Info:  3.0  3.8    Net rxout$TRELLIS_IO_OUT budget 41.441002 ns (78,74) -> (126,92)
Info:                Sink rxout$tr_io.I
Info:                Defined in:
Info:                  UARTTest.v:8.9-8.14
Info: 0.4 ns logic, 3.4 ns routing

Info: Max frequency for clock '$glbnet$clk$TRELLIS_IO_IN': 170.30 MHz (PASS at 12.00 MHz)

Info: Max delay <async>                           -> posedge $glbnet$clk$TRELLIS_IO_IN: 6.43 ns
Info: Max delay posedge $glbnet$clk$TRELLIS_IO_IN -> <async>                          : 3.85 ns

Info: Slack histogram:
Info:  legend: * represents 1 endpoint(s)
Info:          + represents [1,1) endpoint(s)
Info: [ 76907,  77193) |* 
Info: [ 77193,  77479) |*** 
Info: [ 77479,  77765) |*************** 
Info: [ 77765,  78051) |***************************** 
Info: [ 78051,  78337) |*************************** 
Info: [ 78337,  78623) |*************** 
Info: [ 78623,  78909) |**** 
Info: [ 78909,  79195) |******** 
Info: [ 79195,  79481) |***** 
Info: [ 79481,  79767) |******** 
Info: [ 79767,  80053) |* 
Info: [ 80053,  80339) |******** 
Info: [ 80339,  80625) |*** 
Info: [ 80625,  80911) |*** 
Info: [ 80911,  81197) |** 
Info: [ 81197,  81483) |**** 
Info: [ 81483,  81769) |** 
Info: [ 81769,  82055) |*** 
Info: [ 82055,  82341) |********* 
Info: [ 82341,  82627) |****** 
ecppack --svf UARTTest.svf UARTTest_out.config UARTTest.bit
rm UARTTest.json UARTTest_out.config
