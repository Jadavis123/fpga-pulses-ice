yosys -p "synth_ecp5 -json clock_test.json -top clock_test" clock_test.v ecppll.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3578 (git sha1 ed579038, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Parsing `clock_test.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: clock_test.v
Parsing Verilog input from `clock_test.v' to AST representation.
Generating RTLIL representation for module `\clock_test'.
Successfully finished Verilog frontend.

-- Parsing `ecppll.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: ecppll.v
Parsing Verilog input from `ecppll.v' to AST representation.
Generating RTLIL representation for module `\pll'.
Successfully finished Verilog frontend.

-- Running command `synth_ecp5 -json clock_test.json -top clock_test' --

3. Executing SYNTH_ECP5 pass.

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\$__ABC9_LUT5'.
Generating RTLIL representation for module `\$__ABC9_LUT6'.
Generating RTLIL representation for module `\$__ABC9_LUT7'.
Generating RTLIL representation for module `\L6MUX21'.
Generating RTLIL representation for module `\CCU2C'.
Generating RTLIL representation for module `\TRELLIS_RAM16X2'.
Generating RTLIL representation for module `\PFUMX'.
Generating RTLIL representation for module `\TRELLIS_DPR16X4'.
Generating RTLIL representation for module `\DPR16X4C'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\TRELLIS_FF'.
Generating RTLIL representation for module `\TRELLIS_IO'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\TRELLIS_SLICE'.
Generating RTLIL representation for module `\DP16KD'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_bb.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\MULT18X18D'.
Generating RTLIL representation for module `\ALU54B'.
Generating RTLIL representation for module `\EHXPLLL'.
Generating RTLIL representation for module `\DTR'.
Generating RTLIL representation for module `\OSCG'.
Generating RTLIL representation for module `\USRMCLK'.
Generating RTLIL representation for module `\JTAGG'.
Generating RTLIL representation for module `\DELAYF'.
Generating RTLIL representation for module `\DELAYG'.
Generating RTLIL representation for module `\IDDRX1F'.
Generating RTLIL representation for module `\IDDRX2F'.
Generating RTLIL representation for module `\IDDR71B'.
Generating RTLIL representation for module `\IDDRX2DQA'.
Generating RTLIL representation for module `\ODDRX1F'.
Generating RTLIL representation for module `\ODDRX2F'.
Generating RTLIL representation for module `\ODDR71B'.
Generating RTLIL representation for module `\OSHX2A'.
Generating RTLIL representation for module `\ODDRX2DQA'.
Generating RTLIL representation for module `\ODDRX2DQSB'.
Generating RTLIL representation for module `\TSHX2DQA'.
Generating RTLIL representation for module `\TSHX2DQSA'.
Generating RTLIL representation for module `\DQSBUFM'.
Generating RTLIL representation for module `\DDRDLLA'.
Generating RTLIL representation for module `\CLKDIVF'.
Generating RTLIL representation for module `\ECLKSYNCB'.
Generating RTLIL representation for module `\ECLKBRIDGECS'.
Generating RTLIL representation for module `\DCCA'.
Generating RTLIL representation for module `\DCUA'.
Generating RTLIL representation for module `\EXTREFB'.
Generating RTLIL representation for module `\PCSCLKDIV'.
Generating RTLIL representation for module `\PUR'.
Generating RTLIL representation for module `\GSR'.
Generating RTLIL representation for module `\SGSR'.
Generating RTLIL representation for module `\PDPW16KD'.
Successfully finished Verilog frontend.

3.3. Executing HIERARCHY pass (managing design hierarchy).

3.3.1. Analyzing design hierarchy..
Top module:  \clock_test
Used module:     \pll

3.3.2. Analyzing design hierarchy..
Top module:  \clock_test
Used module:     \pll
Removed 0 unused modules.

3.4. Executing PROC pass (convert processes to netlists).

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$151'.
Cleaned up 1 empty switch.

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$231 in module TRELLIS_FF.
Removed a total of 0 dead cases.

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 7 assignments to connections.

3.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$235'.
  Set init value: \Q = 1'0
Found init rule in `\clock_test.$proc$clock_test.v:8$5'.
  Set init value: \counter = 0

3.4.5. Executing PROC_ARST pass (detect async resets in processes).

3.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$235'.
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$231'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$228'.
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$207'.
     1/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$206_EN[3:0]$210
     2/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$206_DATA[3:0]$209
     3/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$206_ADDR[3:0]$208
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$174'.
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$152'.
     1/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$150_EN[3:0]$155
     2/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$150_DATA[3:0]$154
     3/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$150_ADDR[3:0]$153
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$151'.
Creating decoders for process `\clock_test.$proc$clock_test.v:8$5'.
Creating decoders for process `\clock_test.$proc$clock_test.v:26$1'.
     1/1: $0\pulses[0:0]

3.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\TRELLIS_FF.\Q' using process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$231'.
  created $dff cell `$procdff$258' with positive edge clock.
Creating register for signal `\DPR16X4C.\i' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$228'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$206_ADDR' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$207'.
  created $dff cell `$procdff$259' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$206_DATA' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$207'.
  created $dff cell `$procdff$260' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$206_EN' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$207'.
  created $dff cell `$procdff$261' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\i' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$174'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$150_ADDR' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$152'.
  created $dff cell `$procdff$262' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$150_DATA' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$152'.
  created $dff cell `$procdff$263' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$150_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$152'.
  created $dff cell `$procdff$264' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\muxwre' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$151'.
  created direct connection (no actual register cell created).
Creating register for signal `\clock_test.\pulses' using process `\clock_test.$proc$clock_test.v:26$1'.
  created $dff cell `$procdff$265' with positive edge clock.
Creating register for signal `\clock_test.\counter' using process `\clock_test.$proc$clock_test.v:26$1'.
  created $dff cell `$procdff$266' with positive edge clock.

3.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$235'.
Found and cleaned up 2 empty switches in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$231'.
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$231'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$228'.
Found and cleaned up 1 empty switch in `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$207'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$207'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$174'.
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$152'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$152'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$151'.
Removing empty process `clock_test.$proc$clock_test.v:8$5'.
Found and cleaned up 1 empty switch in `\clock_test.$proc$clock_test.v:26$1'.
Removing empty process `clock_test.$proc$clock_test.v:26$1'.
Cleaned up 5 empty switches.

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module pll.
<suppressed ~1 debug messages>

3.6. Executing TRIBUF pass.

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.
<suppressed ~1 debug messages>

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.10. Executing CHECK pass (checking for obvious problems).
checking module clock_test..
found and reported 0 problems.

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_test'.
Removed a total of 0 cells.

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_test.
    New ctrl vector for $pmux cell $procmux$253: { $auto$opt_reduce.cc:134:opt_mux$270 $auto$opt_reduce.cc:134:opt_mux$268 }
  Optimizing cells in module \clock_test.
Performed a total of 1 changes.

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_test'.
Removed a total of 0 cells.

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_test.
Performed a total of 0 changes.

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_test'.
Removed a total of 0 cells.

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.

3.11.16. Finished OPT passes. (There is nothing left to do.)

3.12. Executing FSM pass (extract and optimize FSM).

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_test'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_test.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_test'.
Removed a total of 0 cells.

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$266 ($dff) from module clock_test (D = $add$clock_test.v:41$3_Y, Q = \counter, rval = 0).
Adding EN signal on $procdff$265 ($dff) from module clock_test (D = $0\pulses[0:0], Q = \pulses).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.
<suppressed ~1 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_test.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_test'.
Removed a total of 0 cells.

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 14 bits (of 32) from port B of cell clock_test.$lt$clock_test.v:41$2 ($lt).
Removed top 31 bits (of 32) from port B of cell clock_test.$add$clock_test.v:41$3 ($add).
Removed top 23 bits (of 32) from port B of cell clock_test.$procmux$254_CMP0 ($eq).
Removed top 24 bits (of 32) from port B of cell clock_test.$procmux$255_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell clock_test.$procmux$256_CMP0 ($eq).

3.15. Executing PEEPOPT pass (run peephole optimizers).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..

3.17. Executing SHARE pass (SAT-based resource sharing).

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

3.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

3.21.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/dsp_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__MUL18X18'.
Successfully finished Verilog frontend.

3.21.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

3.22. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module clock_test:
  creating $macc model for $add$clock_test.v:41$3 ($add).
  creating $alu model for $macc $add$clock_test.v:41$3.
  creating $alu model for $lt$clock_test.v:41$2 ($lt): new $alu
  creating $alu cell for $lt$clock_test.v:41$2: $auto$alumacc.cc:485:replace_alu$276
  creating $alu cell for $add$clock_test.v:41$3: $auto$alumacc.cc:485:replace_alu$287
  created 2 $alu and 0 $macc cells.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.
<suppressed ~1 debug messages>

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_test'.
Removed a total of 0 cells.

3.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_test.
Performed a total of 0 changes.

3.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_test'.
Removed a total of 0 cells.

3.23.6. Executing OPT_DFF pass (perform DFF optimizations).

3.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

3.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.

3.23.9. Rerunning OPT passes. (Maybe there is more to do..)

3.23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_test.
Performed a total of 0 changes.

3.23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_test'.
Removed a total of 0 cells.

3.23.13. Executing OPT_DFF pass (perform DFF optimizations).

3.23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..

3.23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.

3.23.16. Finished OPT passes. (There is nothing left to do.)

3.24. Executing MEMORY pass.

3.24.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.24.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.24.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..

3.24.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.24.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..

3.24.6. Executing MEMORY_COLLECT pass (generating $mem cells).

3.25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..

3.26. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

3.27. Executing TECHMAP pass (map to technology primitives).

3.27.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ECP5_DP16KD'.
Generating RTLIL representation for module `\$__ECP5_PDPW16KD'.
Successfully finished Verilog frontend.

3.27.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.28. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

3.29. Executing TECHMAP pass (map to technology primitives).

3.29.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/lutrams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/lutrams_map.v' to AST representation.
Generating RTLIL representation for module `\$__TRELLIS_DPR16X4'.
Successfully finished Verilog frontend.

3.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

3.30. Executing OPT pass (performing simple optimizations).

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.
<suppressed ~1 debug messages>

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_test'.
Removed a total of 0 cells.

3.30.3. Executing OPT_DFF pass (perform DFF optimizations).

3.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..

3.30.5. Finished fast OPT passes.

3.31. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.32. Executing OPT pass (performing simple optimizations).

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_test'.
Removed a total of 0 cells.

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_test.
Performed a total of 0 changes.

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_test'.
Removed a total of 0 cells.

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.

3.32.9. Finished OPT passes. (There is nothing left to do.)

3.33. Executing TECHMAP pass (map to technology primitives).

3.33.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.33.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ecp5_alu'.
Successfully finished Verilog frontend.

3.33.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=18\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~258 debug messages>

3.34. Executing OPT pass (performing simple optimizations).

3.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.
<suppressed ~328 debug messages>

3.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_test'.
<suppressed ~342 debug messages>
Removed a total of 114 cells.

3.34.3. Executing OPT_DFF pass (perform DFF optimizations).

3.34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..
Removed 34 unused cells and 194 unused wires.
<suppressed ~35 debug messages>

3.34.5. Finished fast OPT passes.

3.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..

3.36. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

3.37. Executing TECHMAP pass (map to technology primitives).

3.37.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

3.37.2. Continuing TECHMAP pass.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~109 debug messages>

3.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_test.

3.39. Executing SIMPLEMAP pass (map simple cells to gate primitives).

3.40. Executing ECP5_GSR pass (implement FF init values).
Handling GSR in clock_test.

3.41. Executing ATTRMVCP pass (move or copy attributes).

3.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_test..
Removed 0 unused cells and 165 unused wires.
<suppressed ~1 debug messages>

3.43. Executing TECHMAP pass (map to technology primitives).

3.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

3.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.44. Executing ABC pass (technology mapping using ABC).

3.44.1. Extracting gate netlist of module `\clock_test' to `<abc-temp-dir>/input.blif'..
Extracted 124 gates and 157 wires to a netlist network with 33 inputs and 3 outputs.

3.44.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + dress 
ABC: Total number of equiv classes                =      14.
ABC: Participating nodes from both networks       =      31.
ABC: Participating nodes from the first network   =      13. (  46.43 % of nodes)
ABC: Participating nodes from the second network  =      18. (  64.29 % of nodes)
ABC: Node pairs (any polarity)                    =      13. (  46.43 % of names can be moved)
ABC: Node pairs (same polarity)                   =       7. (  25.00 % of names can be moved)
ABC: Total runtime =     0.08 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

3.44.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       27
ABC RESULTS:        internal signals:      121
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:        3
Removing temp directory.
Removed 0 unused cells and 69 unused wires.

3.45. Executing TECHMAP pass (map to technology primitives).

3.45.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.45.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111101000000000000000000 for cells of type $lut.
No more expansions possible.
<suppressed ~223 debug messages>

3.46. Executing OPT_LUT_INS pass (discard unused LUT inputs).
Optimizing LUTs in clock_test.
  Optimizing lut $abc$1239$auto$blifparse.cc:498:parse_blif$1240.lut0 (4 -> 0)
Removed 0 unused cells and 69 unused wires.

3.47. Executing AUTONAME pass.
Renamed 915 objects in module clock_test (23 iterations).
<suppressed ~114 debug messages>

3.48. Executing HIERARCHY pass (managing design hierarchy).

3.48.1. Analyzing design hierarchy..
Top module:  \clock_test

3.48.2. Analyzing design hierarchy..
Top module:  \clock_test
Removed 0 unused modules.

3.49. Printing statistics.

=== clock_test ===

   Number of wires:                 29
   Number of wire bits:            271
   Number of public wires:          29
   Number of public wire bits:     271
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 95
     CCU2C                          32
     EHXPLLL                         1
     LUT4                           28
     PFUMX                           1
     TRELLIS_FF                     33

3.50. Executing CHECK pass (checking for obvious problems).
checking module clock_test..
found and reported 0 problems.

3.51. Executing JSON backend.

End of script. Logfile hash: a6acc1443c, CPU: user 1.19s system 0.12s, MEM: 247.89 MB peak
Yosys 0.9+3578 (git sha1 ed579038, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 57% 15x read_verilog (0 sec), 10% 1x abc (0 sec), ...
nextpnr-ecp5 --pre-pack clk_constraint.py --json clock_test.json --textcfg clock_test_out.config --um5g-85k --package CABGA381 --lpf ecp5.lpf
Info: constraining clock net 'clk' to 12.00 MHz
Warning: net 'outpll' does not exist in design, ignoring clock constraint

Info: Logic utilisation before packing:
Info:     Total LUT4s:        92/83640     0%
Info:         logic LUTs:     28/83640     0%
Info:         carry LUTs:     64/83640     0%
Info:           RAM LUTs:      0/41820     0%
Info:          RAMW LUTs:      0/20910     0%

Info:      Total DFFs:        66/83640     0%

Info: Packing IOs..
Info: pin 'clk$tr_io' constrained to Bel 'X63/Y0/PIOA'.
Info: pin 'out$tr_io' constrained to Bel 'X126/Y92/PIOC'.
Info: Packing constants..
Info: Packing carries...
Info: Finding LUTFF pairs...
Info: Packing LUT5-7s...
Info: Finding LUT-LUT pairs...
Info: Packing paired LUTs into a SLICE...
Info: Packing unpaired LUTs into a SLICE...
Info: Packing unpaired FFs into a SLICE...
Info: Generating derived timing constraints...
Info:     Input frequency of PLL 'ecppll.pll_i' is constrained to 12.0 MHz
Info:     Derived frequency constraint of 200.0 MHz for net clk_pll
Info: Promoting globals...
Info:     promoting clock net clk_pll to global network
Info: Checksum: 0xd3f81fcd

Info: Annotating ports with timing budgets for target frequency 12.00 MHz
Info: Checksum: 0x281f136b

Info: Device utilisation:
Info: 	       TRELLIS_SLICE:    57/41820     0%
Info: 	          TRELLIS_IO:     2/  365     0%
Info: 	                DCCA:     1/   56     1%
Info: 	              DP16KD:     0/  208     0%
Info: 	          MULT18X18D:     0/  156     0%
Info: 	              ALU54B:     0/   78     0%
Info: 	             EHXPLLL:     1/    4    25%
Info: 	             EXTREFB:     0/    2     0%
Info: 	                DCUA:     0/    2     0%
Info: 	           PCSCLKDIV:     0/    2     0%
Info: 	             IOLOGIC:     0/  224     0%
Info: 	            SIOLOGIC:     0/  141     0%
Info: 	                 GSR:     0/    1     0%
Info: 	               JTAGG:     0/    1     0%
Info: 	                OSCG:     0/    1     0%
Info: 	               SEDGA:     0/    1     0%
Info: 	                 DTR:     0/    1     0%
Info: 	             USRMCLK:     0/    1     0%
Info: 	             CLKDIVF:     0/    4     0%
Info: 	           ECLKSYNCB:     0/   10     0%
Info: 	             DLLDELD:     0/    8     0%
Info: 	              DDRDLL:     0/    4     0%
Info: 	             DQSBUFM:     0/   14     0%
Info: 	     TRELLIS_ECLKBUF:     0/    8     0%
Info: 	        ECLKBRIDGECS:     0/    2     0%

Info: Placed 3 cells based on constraints.
Info: Creating initial analytic placement for 23 cells, random placement wirelen = 6742.
Info:     at initial placer iter 0, wirelen = 601
Info:     at initial placer iter 1, wirelen = 542
Info:     at initial placer iter 2, wirelen = 455
Info:     at initial placer iter 3, wirelen = 481
Info: Running main analytical placer.
Info:     at iteration #1, type TRELLIS_SLICE: wirelen solved = 439, spread = 662, legal = 662; time = 0.01s
Info:     at iteration #2, type TRELLIS_SLICE: wirelen solved = 435, spread = 659, legal = 659; time = 0.01s
Info:     at iteration #3, type TRELLIS_SLICE: wirelen solved = 436, spread = 653, legal = 637; time = 0.01s
Info:     at iteration #4, type TRELLIS_SLICE: wirelen solved = 437, spread = 660, legal = 660; time = 0.01s
Info:     at iteration #5, type TRELLIS_SLICE: wirelen solved = 438, spread = 657, legal = 657; time = 0.01s
Info:     at iteration #6, type TRELLIS_SLICE: wirelen solved = 439, spread = 715, legal = 715; time = 0.01s
Info:     at iteration #7, type TRELLIS_SLICE: wirelen solved = 440, spread = 712, legal = 712; time = 0.01s
Info:     at iteration #8, type TRELLIS_SLICE: wirelen solved = 445, spread = 711, legal = 711; time = 0.01s
Info: HeAP Placer Time: 0.15s
Info:   of which solving equations: 0.05s
Info:   of which spreading cells: 0.02s
Info:   of which strict legalisation: 0.00s

Info: Running simulated annealing placer for refinement.
Info:   at iteration #1: temp = 0.000000, timing cost = 43, wirelen = 637
Info:   at iteration #5: temp = 0.000000, timing cost = 20, wirelen = 516
Info:   at iteration #10: temp = 0.000000, timing cost = 20, wirelen = 503
Info:   at iteration #13: temp = 0.000000, timing cost = 20, wirelen = 497 
Info: SA placement time 0.10s

Info: Max frequency for clock '$glbnet$clk_pll': 270.93 MHz (PASS at 200.04 MHz)

Info: Max delay posedge $glbnet$clk_pll -> <async>: 11.70 ns

Info: Slack histogram:
Info:  legend: * represents 1 endpoint(s)
Info:          + represents [1,1) endpoint(s)
Info: [  1308,   4825) |************************************************** 
Info: [  4825,   8342) | 
Info: [  8342,  11859) | 
Info: [ 11859,  15376) | 
Info: [ 15376,  18893) | 
Info: [ 18893,  22410) | 
Info: [ 22410,  25927) | 
Info: [ 25927,  29444) | 
Info: [ 29444,  32961) | 
Info: [ 32961,  36478) | 
Info: [ 36478,  39995) | 
Info: [ 39995,  43512) | 
Info: [ 43512,  47029) | 
Info: [ 47029,  50546) | 
Info: [ 50546,  54063) | 
Info: [ 54063,  57580) | 
Info: [ 57580,  61097) | 
Info: [ 61097,  64614) | 
Info: [ 64614,  68131) | 
Info: [ 68131,  71648) |* 
Info: Checksum: 0xef69250a
Info: Routing globals...
Info:     routing clock net $glbnet$clk_pll using global 0

Info: Routing..
Info: Setting up routing queue.
Info: Routing 268 arcs.
Info:            |   (re-)routed arcs  |   delta    | remaining|       time spent     |
Info:    IterCnt |  w/ripup   wo/ripup |  w/r  wo/r |      arcs| batch(sec) total(sec)|
Info:        271 |        3        268 |    3   268 |         0|       0.17       0.17|
Info: Routing complete.
Info: Router1 time 0.17s
Info: Checksum: 0xa04f5c5b

Info: Critical path report for clock '$glbnet$clk_pll' (posedge -> posedge):
Info: curr total
Info:  0.3  0.3  Source counter_TRELLIS_FF_Q_DI_CCU2C_S0$CCU2_SLICE.Q1
Info:  1.2  1.5    Net counter[9] budget 0.786000 ns (15,7) -> (14,8)
Info:                Sink pulses_TRELLIS_FF_Q_DI_LUT4_Z_B_LUT4_Z_A_LUT4_C_Z_LUT4_Z_C_LUT4_Z_SLICE.C1
Info:                Defined in:
Info:                  clock_test.v:8.13-8.20
Info:  0.1  1.7  Source pulses_TRELLIS_FF_Q_DI_LUT4_Z_B_LUT4_Z_A_LUT4_C_Z_LUT4_Z_C_LUT4_Z_SLICE.F1
Info:  0.6  2.3    Net pulses_TRELLIS_FF_Q_DI_LUT4_Z_B_LUT4_Z_A_LUT4_C_Z_LUT4_Z_C[3] budget 0.786000 ns (14,8) -> (17,8)
Info:                Sink pulses_TRELLIS_FF_Q_DI_LUT4_Z_B_LUT4_Z_3_A_LUT4_Z_2_SLICE.C1
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.1  2.5  Source pulses_TRELLIS_FF_Q_DI_LUT4_Z_B_LUT4_Z_3_A_LUT4_Z_2_SLICE.F1
Info:  0.6  3.0    Net pulses_TRELLIS_FF_Q_DI_LUT4_Z_B_LUT4_Z_A_LUT4_C_Z[1] budget 0.786000 ns (17,8) -> (16,8)
Info:                Sink pulses_TRELLIS_FF_Q_DI_LUT4_Z_B_LUT4_Z_A_LUT4_C_Z_LUT4_B_SLICE.C1
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.1  3.2  Source pulses_TRELLIS_FF_Q_DI_LUT4_Z_B_LUT4_Z_A_LUT4_C_Z_LUT4_B_SLICE.F1
Info:  0.5  3.6    Net pulses_TRELLIS_FF_Q_DI_LUT4_Z_B_LUT4_Z_A_LUT4_C_Z_LUT4_B_Z budget 0.786000 ns (16,8) -> (17,7)
Info:                Sink counter_TRELLIS_FF_Q_DI_CCU2C_S0_5$CCU2_SLICE.LSR
Info:  0.2  3.9  Setup counter_TRELLIS_FF_Q_DI_CCU2C_S0_5$CCU2_SLICE.LSR
Info: 1.0 ns logic, 2.9 ns routing

Info: Critical path report for cross-domain path 'posedge $glbnet$clk_pll' -> '<async>':
Info: curr total
Info:  0.3  0.3  Source pulses_TRELLIS_FF_Q_DI_LUT4_Z_SLICE.Q0
Info:  7.5  7.8    Net out$TRELLIS_IO_OUT budget 83.024002 ns (15,8) -> (126,92)
Info:                Sink out$tr_io.I
Info:                Defined in:
Info:                  clock_test.v:7.15-7.21
Info: 0.3 ns logic, 7.5 ns routing

Info: Max frequency for clock '$glbnet$clk_pll': 258.73 MHz (PASS at 200.04 MHz)

Info: Max delay posedge $glbnet$clk_pll -> <async>: 7.80 ns

Info: Slack histogram:
Info:  legend: * represents 1 endpoint(s)
Info:          + represents [1,1) endpoint(s)
Info: [  1134,   4854) |************************************************** 
Info: [  4854,   8574) | 
Info: [  8574,  12294) | 
Info: [ 12294,  16014) | 
Info: [ 16014,  19734) | 
Info: [ 19734,  23454) | 
Info: [ 23454,  27174) | 
Info: [ 27174,  30894) | 
Info: [ 30894,  34614) | 
Info: [ 34614,  38334) | 
Info: [ 38334,  42054) | 
Info: [ 42054,  45774) | 
Info: [ 45774,  49494) | 
Info: [ 49494,  53214) | 
Info: [ 53214,  56934) | 
Info: [ 56934,  60654) | 
Info: [ 60654,  64374) | 
Info: [ 64374,  68094) | 
Info: [ 68094,  71814) | 
Info: [ 71814,  75534) |* 
1 warning, 0 errors
ecppack --svf clock_test.svf clock_test_out.config clock_test.bit
rm clock_test_out.config clock_test.json
